<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32H7B3I-DK\STM32H7B3I-DK.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32H7B3I-DK\STM32H7B3I-DK.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Aug 27 23:30:47 2024
<BR><P>
<H3>Maximum Stack Usage =       2188 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1cb]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[22]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BusFault_Handler</a><BR>
 <LI><a href="#[20]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">HardFault_Handler</a><BR>
 <LI><a href="#[21]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">MemManage_Handler</a><BR>
 <LI><a href="#[e1]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">StartDefaultTask</a><BR>
 <LI><a href="#[23]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">UsageFault_Handler</a><BR>
 <LI><a href="#[30d]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30d]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a><BR>
 <LI><a href="#[335]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a><BR>
 <LI><a href="#[33a]">touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33a]">touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[af]">BDMA1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[99]">BDMA2_Channel0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[9a]">BDMA2_Channel1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[9b]">BDMA2_Channel2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[9c]">BDMA2_Channel3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[9d]">BDMA2_Channel4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[9e]">BDMA2_Channel5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[9f]">BDMA2_Channel6_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a0]">BDMA2_Channel7_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[b6]">BSP_GetTick</a> from stm32h7b3i_discovery_bus.o(i.BSP_GetTick) referenced from stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
 <LI><a href="#[b3]">BSP_I2C4_DeInit</a> from stm32h7b3i_discovery_bus.o(i.BSP_I2C4_DeInit) referenced from stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
 <LI><a href="#[b2]">BSP_I2C4_Init</a> from stm32h7b3i_discovery_bus.o(i.BSP_I2C4_Init) referenced from stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
 <LI><a href="#[b4]">BSP_I2C4_ReadReg</a> from stm32h7b3i_discovery_bus.o(i.BSP_I2C4_ReadReg) referenced from stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
 <LI><a href="#[b5]">BSP_I2C4_WriteReg</a> from stm32h7b3i_discovery_bus.o(i.BSP_I2C4_WriteReg) referenced from stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
 <LI><a href="#[22]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[84]">CEC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a1]">COMP_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a7]">CRS_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[75]">CRYP_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[97]">DAC2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[74]">DCMI_PSSI_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[89]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[8a]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[8b]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[8c]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[66]">DFSDM1_FLT4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[67]">DFSDM1_FLT5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[68]">DFSDM1_FLT6_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[69]">DFSDM1_FLT7_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[52]">DFSDM2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[33]">DMA1_Stream0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[34]">DMA1_Stream1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[35]">DMA1_Stream2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[36]">DMA1_Stream3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[37]">DMA1_Stream4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[38]">DMA1_Stream5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[39]">DMA1_Stream6_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[57]">DMA1_Stream7_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[80]">DMA2D_IRQHandler</a> from stm32h7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[60]">DMA2_Stream0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[61]">DMA2_Stream1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[62]">DMA2_Stream2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[63]">DMA2_Stream3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[64]">DMA2_Stream4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream6_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream7_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[88]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[98]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a9]">DTS_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[25]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a8]">ECC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[2e]">EXTI0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[50]">EXTI15_10_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[2f]">EXTI1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[30]">EXTI2_IRQHandler</a> from stm32h7xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[31]">EXTI3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[32]">EXTI4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[3f]">EXTI9_5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[3b]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[3d]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[3c]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[3e]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[65]">FDCAN_CAL_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[58]">FMC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[77]">FPU_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[1c]">FT5336_ClearIT</a> from ft5336.o(i.FT5336_ClearIT) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[13]">FT5336_DeInit</a> from ft5336.o(i.FT5336_DeInit) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[1b]">FT5336_DisableIT</a> from ft5336.o(i.FT5336_DisableIT) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[1a]">FT5336_EnableIT</a> from ft5336.o(i.FT5336_EnableIT) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[14]">FT5336_GestureConfig</a> from ft5336.o(i.FT5336_GestureConfig) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[19]">FT5336_GetCapabilities</a> from ft5336.o(i.FT5336_GetCapabilities) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[18]">FT5336_GetGesture</a> from ft5336.o(i.FT5336_GetGesture) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[17]">FT5336_GetMultiTouchState</a> from ft5336.o(i.FT5336_GetMultiTouchState) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[16]">FT5336_GetState</a> from ft5336.o(i.FT5336_GetState) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[1d]">FT5336_ITStatus</a> from ft5336.o(i.FT5336_ITStatus) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[12]">FT5336_Init</a> from ft5336.o(i.FT5336_Init) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[15]">FT5336_ReadID</a> from ft5336.o(i.FT5336_ReadID) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[ae]">GFXMMU_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[76]">HASH_RNG_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[96]">HSEM1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[20]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[48]">I2C1_ER_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[47]">I2C1_EV_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[4a]">I2C2_ER_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[49]">I2C2_EV_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[6f]">I2C3_ER_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[6e]">I2C3_EV_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[86]">I2C4_ER_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[85]">I2C4_EV_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[e6]">IdleTaskHook</a> from touchgfxhal.o(i.IdleTaskHook) referenced from freertos.o(i.vApplicationIdleHook)
 <LI><a href="#[93]">JPEG_IRQHandler</a> from stm32h7xx_it.o(i.JPEG_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[bb]">JPEG_MDMAErrorCallback</a> from stm32h7xx_hal_jpeg.o(i.JPEG_MDMAErrorCallback) referenced from stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[ba]">JPEG_MDMAInCpltCallback</a> from stm32h7xx_hal_jpeg.o(i.JPEG_MDMAInCpltCallback) referenced from stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[bd]">JPEG_MDMAOutAbortCallback</a> from stm32h7xx_hal_jpeg.o(i.JPEG_MDMAOutAbortCallback) referenced from stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[bc]">JPEG_MDMAOutCpltCallback</a> from stm32h7xx_hal_jpeg.o(i.JPEG_MDMAOutCpltCallback) referenced from stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[83]">LPTIM1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a2]">LPTIM2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a3]">LPTIM3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a6]">LPUART1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[7f]">LTDC_ER_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[7e]">LTDC_IRQHandler</a> from stm32h7xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[92]">MDIOS_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[91]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[94]">MDMA_IRQHandler</a> from stm32h7xx_it.o(i.MDMA_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[21]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[1f]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[82]">OCTOSPI1_IRQHandler</a> from stm32h7xx_it.o(i.OCTOSPI1_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[ab]">OCTOSPI2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[b9]">OSPI_DMAAbortCplt</a> from stm32h7xx_hal_ospi.o(i.OSPI_DMAAbortCplt) referenced from stm32h7xx_hal_ospi.o(i.HAL_OSPI_IRQHandler)
 <LI><a href="#[ac]">OTFDEC1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[ad]">OTFDEC2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[70]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[73]">OTG_HS_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[72]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[29]">PVD_PVM_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[26]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[2d]">RCC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[51]">RTC_Alarm_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[2a]">RTC_TAMP_STAMP_CSS_LSE_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[2b]">RTC_WKUP_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[b7]">ReadRegWrap</a> from ft5336.o(i.ReadRegWrap) referenced from ft5336.o(i.FT5336_RegisterBusIO)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[7d]">SAI1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[81]">SAI2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[59]">SDMMC1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[95]">SDMMC2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[87]">SPDIF_RX_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[4b]">SPI1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[4c]">SPI2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[5b]">SPI3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[7a]">SPI4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[7b]">SPI5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[7c]">SPI6_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[24]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[8d]">SWPMI1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[e1]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(i.main)
 <LI><a href="#[27]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[b0]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h7b3xxq.o(.text)
 <LI><a href="#[8e]">TIM15_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[8f]">TIM16_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[90]">TIM17_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[40]">TIM1_BRK_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[43]">TIM1_CC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[42]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[41]">TIM1_UP_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[44]">TIM2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[45]">TIM3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[46]">TIM4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[5a]">TIM5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[5e]">TIM6_DAC_IRQHandler</a> from stm32h7xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[5f]">TIM7_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[53]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[56]">TIM8_CC_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[55]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[54]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[e2]">TouchGFX_Task</a> from app_touchgfx.o(i.TouchGFX_Task) referenced from main.o(i.main)
 <LI><a href="#[5c]">UART4_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[5d]">UART5_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[78]">UART7_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[79]">UART8_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a4]">UART9_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[a5]">USART10_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[4d]">USART1_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[4e]">USART2_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[4f]">USART3_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[6d]">USART6_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[23]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[aa]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[28]">WWDG_IRQHandler</a> from startup_stm32h7b3xxq.o(.text) referenced from startup_stm32h7b3xxq.o(RESET)
 <LI><a href="#[b8]">WriteRegWrap</a> from ft5336.o(i.WriteRegWrap) referenced from ft5336.o(i.FT5336_RegisterBusIO)
 <LI><a href="#[bf]">DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</a> from stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef) referenced from stm32dma.o(i._ZN8STM32DMA10initializeEv)
 <LI><a href="#[ec]">TouchGFXHAL::initialize()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fa]">TouchGFXHAL::enableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ee]">TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fb]">TouchGFXHAL::disableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[106]">TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f9]">TouchGFXHAL::configureInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fc]">TouchGFXHAL::enableLCDControllerInterrupt()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ed]">TouchGFXHAL::taskEntry()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL9taskEntryEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e0]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e0]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[e5]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[e5]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(i.touchgfx_init)
 <LI><a href="#[10e]">mainViewBase::setupScreen()</a> from mainviewbase.o(i._ZN12mainViewBase11setupScreenEv) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[10c]">mainViewBase::~mainViewBase()</a> from mainviewbase.o(i._ZN12mainViewBaseD1Ev) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[117]">mainPresenter::deactivate()</a> from mainpresenter.o(i._ZN13mainPresenter10deactivateEv) referenced from mainpresenter.o(.constdata__ZTV13mainPresenter)
 <LI><a href="#[116]">mainPresenter::activate()</a> from mainpresenter.o(i._ZN13mainPresenter8activateEv) referenced from mainpresenter.o(.constdata__ZTV13mainPresenter)
 <LI><a href="#[118]">mainPresenter::~mainPresenter()</a> from mainpresenter.o(i._ZN13mainPresenterD1Ev) referenced from mainpresenter.o(.constdata__ZTV13mainPresenter)
 <LI><a href="#[11d]">FrontendApplication::handleTickEvent()</a> from frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[124]">HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttj) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[127]">HardwareMJPEGDecoder::getNumberOfFrames()</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder17getNumberOfFramesEv) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[125]">HardwareMJPEGDecoder::gotoFrame(unsigned)</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder9gotoFrameEj) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[d8]">HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</a> from touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[d8]">HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</a> from touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[129]">STM32TouchController::sampleTouch(int&, int&)</a> from stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[128]">STM32TouchController::init()</a> from stm32touchcontroller.o(i._ZN20STM32TouchController4initEv) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[db]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[db]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[10b]">TouchGFXGeneratedHAL::FlushCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[104]">TouchGFXGeneratedHAL::beginFrame()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10beginFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[10a]">TouchGFXGeneratedHAL::InvalidateCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f2]">TouchGFXGeneratedHAL::unlockFrameBuffer()</a> from touchgfxhal.o(i._ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[105]">TouchGFXGeneratedHAL::endFrame()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL8endFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[df]">ApplicationFontProvider::~ApplicationFontProvider()</a> from touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
 <LI><a href="#[df]">ApplicationFontProvider::~ApplicationFontProvider()</a> from touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[ea]">FrontendApplicationBase::gotomainScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[12b]">FrontendApplicationBase::~FrontendApplicationBase()</a> from touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[d9]">DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::Stream::Stream()</a> from touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[da]">DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::~DedicatedBufferController()</a> from touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev) referenced from touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE)
 <LI><a href="#[da]">DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::~DedicatedBufferController()</a> from touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[132]">STM32DMA::getDMAType()</a> from stm32dma.o(i._ZN8STM32DMA10getDMATypeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[12f]">STM32DMA::initialize()</a> from stm32dma.o(i._ZN8STM32DMA10initializeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[12c]">STM32DMA::getBlitCaps()</a> from stm32dma.o(i._ZN8STM32DMA11getBlitCapsEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[136]">STM32DMA::setupDataCopy(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[137]">STM32DMA::setupDataFill(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[131]">STM32DMA::signalDMAInterrupt()</a> from stm32dma.o(i._ZN8STM32DMA18signalDMAInterruptEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[130]">STM32DMA::start()</a> from stm32dma.o(i._ZN8STM32DMA5startEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[dc]">STM32DMA::~STM32DMA()</a> from stm32dma.o(i._ZN8STM32DMAD1Ev) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[dc]">STM32DMA::~STM32DMA()</a> from stm32dma.o(i._ZN8STM32DMAD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[13c]">mainView::setupScreen()</a> from mainview.o(i._ZN8mainView11setupScreenEv) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[13d]">mainView::tearDownScreen()</a> from mainview.o(i._ZN8mainView14tearDownScreenEv) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[13e]">mainView::handleTickEvent()</a> from mainview.o(i._ZN8mainView15handleTickEventEv) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[13b]">mainView::~mainView()</a> from mainview.o(i._ZN8mainViewD1Ev) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[15d]">touchgfx::Transition::invalidate()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[15e]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[15c]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[15b]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[121]">touchgfx::Application::invalidate()</a> from application.o(i._ZN8touchgfx11Application10invalidateEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[121]">touchgfx::Application::invalidate()</a> from application.o(i._ZN8touchgfx11Application10invalidateEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[121]">touchgfx::Application::invalidate()</a> from application.o(i._ZN8touchgfx11Application10invalidateEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[121]">touchgfx::Application::invalidate()</a> from application.o(i._ZN8touchgfx11Application10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[11c]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[11c]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[11c]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[11c]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[122]">touchgfx::Application::invalidateArea(touchgfx::Rect)</a> from application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[122]">touchgfx::Application::invalidateArea(touchgfx::Rect)</a> from application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[122]">touchgfx::Application::invalidateArea(touchgfx::Rect)</a> from application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[122]">touchgfx::Application::invalidateArea(touchgfx::Rect)</a> from application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[120]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[120]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[120]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[120]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[11a]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[11a]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[11a]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[11a]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[12a]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[12a]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[12a]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[11f]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[11f]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[11f]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[11f]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[119]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[119]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[119]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[119]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[11b]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[11b]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[11b]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[11b]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[13f]">touchgfx::Application::handlePendingScreenTransition()</a> from application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[123]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[123]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[123]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[123]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[156]">touchgfx::MoveAnimator&lang;touchgfx::Circle&rang;::handleTickEvent()</a> from mainviewbase.o(t._ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[15a]">touchgfx::NoTransition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[159]">touchgfx::NoTransition::~NoTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[12d]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[138]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[139]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[135]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[134]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[13a]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[12e]">touchgfx::DMA_Interface::flush()</a> from stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[133]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[be]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[be]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
 <LI><a href="#[be]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_20_4bpp.o(i._Z23getFont_verdana_20_4bppv)
 <LI><a href="#[be]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv)
 <LI><a href="#[11e]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[11e]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[11e]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[165]">touchgfx::AbstractPartition::~AbstractPartition__sub_object()</a> from abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev) referenced from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[168]">touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[169]">touchgfx::LockFreeDMA_Queue::pop()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[16a]">touchgfx::LockFreeDMA_Queue::first()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[167]">touchgfx::LockFreeDMA_Queue::isFull()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[166]">touchgfx::LockFreeDMA_Queue::isEmpty()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[16e]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[16f]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[de]">touchgfx::VectorFontRendererImpl::~VectorFontRendererImpl()</a> from touchgfxconfiguration.o(i._ZN8touchgfx22VectorFontRendererImplD1Ev) referenced from vectorfontrendererimpl.o(.constdata__ZTVN8touchgfx22VectorFontRendererImplE)
 <LI><a href="#[de]">touchgfx::VectorFontRendererImpl::~VectorFontRendererImpl()</a> from touchgfxconfiguration.o(i._ZN8touchgfx22VectorFontRendererImplD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[16c]">touchgfx::CortexMMCUInstrumentation::getCPUCycles()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[16d]">touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[16b]">touchgfx::CortexMMCUInstrumentation::init()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation4initEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[17a]">touchgfx::HAL::FlushCache()</a> from hal.o(i._ZN8touchgfx3HAL10FlushCacheEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[177]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[102]">touchgfx::HAL::getDMAType()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[102]">touchgfx::HAL::getDMAType()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[174]">touchgfx::HAL::initialize()</a> from hal.o(i._ZN8touchgfx3HAL10initializeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f4]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f4]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[179]">touchgfx::HAL::InvalidateCache()</a> from hal.o(i._ZN8touchgfx3HAL15InvalidateCacheEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f8]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f8]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f1]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f1]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[175]">touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ef]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ef]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[101]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[101]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[176]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[fe]">touchgfx::HAL::setAnimationStorage(void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fe]">touchgfx::HAL::setAnimationStorage(void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f7]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f7]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[eb]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[eb]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ff]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ff]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[fd]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fd]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[109]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[109]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[103]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[103]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[107]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[107]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[108]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[108]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f6]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f6]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f5]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f5]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[178]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f0]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f0]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[100]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[100]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e9]">touchgfx::Rect::Rect()</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
 <LI><a href="#[c0]">touchgfx::BlitOp::BlitOp()</a> from stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev) referenced from stm32dma.o(i._ZN8STM32DMAC1Ev)
 <LI><a href="#[17c]">touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</a> from canvas.o(i._ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_) referenced from canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
 <LI><a href="#[17b]">touchgfx::Canvas::~Canvas()</a> from circle.o(i._ZN8touchgfx6CanvasD1Ev) referenced from canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
 <LI><a href="#[17e]">touchgfx::Screen::setupScreen()</a> from screen.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[115]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[115]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[115]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[110]">touchgfx::Screen::tearDownScreen()</a> from mainviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[110]">touchgfx::Screen::tearDownScreen()</a> from mainviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[10f]">touchgfx::Screen::afterTransition()</a> from mainview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[10f]">touchgfx::Screen::afterTransition()</a> from mainview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[10f]">touchgfx::Screen::afterTransition()</a> from mainview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[112]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[112]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[112]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[114]">touchgfx::Screen::handleTickEvent()</a> from mainviewbase.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[114]">touchgfx::Screen::handleTickEvent()</a> from mainviewbase.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[111]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[111]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[111]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[113]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[113]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[113]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[10d]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from mainviewbase.o(.constdata__ZTV12mainViewBase)
 <LI><a href="#[10d]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from mainview.o(.constdata__ZTV8mainView)
 <LI><a href="#[10d]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[17d]">touchgfx::Screen::~Screen()</a> from screen.o(i._ZN8touchgfx6ScreenD1Ev) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[145]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[145]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[145]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[145]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[17f]">touchgfx::Outline::~Outline()</a> from outline.o(i._ZN8touchgfx7OutlineD1Ev) referenced from outline.o(.constdata__ZTVN8touchgfx7OutlineE)
 <LI><a href="#[180]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[150]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[150]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[150]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[150]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[150]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[150]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[152]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[152]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[152]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[152]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[152]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14e]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[14e]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[14e]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[14e]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[14e]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14e]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[14f]">touchgfx::Drawable::handleTickEvent()</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[14f]">touchgfx::Drawable::handleTickEvent()</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[14f]">touchgfx::Drawable::handleTickEvent()</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[14f]">touchgfx::Drawable::handleTickEvent()</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14f]">touchgfx::Drawable::handleTickEvent()</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[14c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[14c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[14c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[14c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[14c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[14d]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[14d]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[14d]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[14d]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[14d]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14d]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[148]">touchgfx::Drawable::setX(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[148]">touchgfx::Drawable::setX(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[148]">touchgfx::Drawable::setX(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[148]">touchgfx::Drawable::setX(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[148]">touchgfx::Drawable::setX(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[148]">touchgfx::Drawable::setX(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[149]">touchgfx::Drawable::setY(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[149]">touchgfx::Drawable::setY(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[149]">touchgfx::Drawable::setY(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[149]">touchgfx::Drawable::setY(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[149]">touchgfx::Drawable::setY(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[149]">touchgfx::Drawable::setY(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[151]">touchgfx::Drawable::moveTo(short, short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[151]">touchgfx::Drawable::moveTo(short, short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[151]">touchgfx::Drawable::moveTo(short, short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[151]">touchgfx::Drawable::moveTo(short, short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[151]">touchgfx::Drawable::moveTo(short, short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[151]">touchgfx::Drawable::moveTo(short, short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[14a]">touchgfx::Drawable::setWidth(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[14a]">touchgfx::Drawable::setWidth(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[14a]">touchgfx::Drawable::setWidth(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[14a]">touchgfx::Drawable::setWidth(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[14a]">touchgfx::Drawable::setWidth(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14a]">touchgfx::Drawable::setWidth(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[14b]">touchgfx::Drawable::setHeight(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[14b]">touchgfx::Drawable::setHeight(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[14b]">touchgfx::Drawable::setHeight(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[14b]">touchgfx::Drawable::setHeight(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[14b]">touchgfx::Drawable::setHeight(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[14b]">touchgfx::Drawable::setHeight(short)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[183]">touchgfx::LCD24bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
 <LI><a href="#[c1]">touchgfx::LCD24bpp::DecompressorL8_L4::~DecompressorL8_L4()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp17DecompressorL8_L4E)
 <LI><a href="#[c1]">touchgfx::LCD24bpp::DecompressorL8_L4::~DecompressorL8_L4()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev)
 <LI><a href="#[c2]">touchgfx::LCD24bpp::DecompressorL8_RLE::~DecompressorL8_RLE()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp18DecompressorL8_RLEE)
 <LI><a href="#[c2]">touchgfx::LCD24bpp::DecompressorL8_RLE::~DecompressorL8_RLE()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv)
 <LI><a href="#[c3]">touchgfx::LCD24bpp::DecompressorL8_LZW9::~DecompressorL8_LZW9()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp19DecompressorL8_LZW9E)
 <LI><a href="#[c3]">touchgfx::LCD24bpp::DecompressorL8_LZW9::~DecompressorL8_LZW9()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev)
 <LI><a href="#[c4]">touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAE)
 <LI><a href="#[c4]">touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv)
 <LI><a href="#[c5]">touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
 <LI><a href="#[c5]">touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv)
 <LI><a href="#[c8]">touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAE)
 <LI><a href="#[c8]">touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv)
 <LI><a href="#[c9]">touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
 <LI><a href="#[c9]">touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv)
 <LI><a href="#[c6]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[c6]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv)
 <LI><a href="#[c7]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c7]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv)
 <LI><a href="#[cc]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[cc]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
 <LI><a href="#[ca]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[ca]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv)
 <LI><a href="#[cd]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[cd]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
 <LI><a href="#[d0]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[d0]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv)
 <LI><a href="#[cb]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[cb]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv)
 <LI><a href="#[ce]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[ce]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
 <LI><a href="#[d1]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d1]">touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv)
 <LI><a href="#[d4]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[d4]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
 <LI><a href="#[cf]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[cf]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
 <LI><a href="#[d2]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[d2]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
 <LI><a href="#[d5]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d5]">touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
 <LI><a href="#[d3]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d3]">touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
 <LI><a href="#[d6]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[d6]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
 <LI><a href="#[d7]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d7]">touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
 <LI><a href="#[182]">touchgfx::LCD24bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd24bpp.o(i._ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
 <LI><a href="#[dd]">touchgfx::LCD24bpp::~LCD24bpp()</a> from touchgfxconfiguration.o(i._ZN8touchgfx8LCD24bppD1Ev) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
 <LI><a href="#[dd]">touchgfx::LCD24bpp::~LCD24bpp()</a> from touchgfxconfiguration.o(i._ZN8touchgfx8LCD24bppD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[188]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[189]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18b]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18a]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18c]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[18d]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[18e]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[18f]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[190]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[191]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[f3]">TouchGFXHAL::getTFTFrameBuffer() const</a> from touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[126]">HardwareMJPEGDecoder::getCurrentFrameNumber() const</a> from hardwaremjpegdecoder.o(i._ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[143]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[143]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[143]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[141]">touchgfx::CanvasWidget::getSolidRect() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[141]">touchgfx::CanvasWidget::getSolidRect() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[141]">touchgfx::CanvasWidget::getSolidRect() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[154]">touchgfx::CanvasWidget::getMinimalRect() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[140]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[140]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[140]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[153]">touchgfx::CanvasWidget::getAlpha() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[153]">touchgfx::CanvasWidget::getAlpha() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[153]">touchgfx::CanvasWidget::getAlpha() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[15f]">touchgfx::PainterRGB888::getRenderingMethod() const</a> from painterrgb888.o(i._ZNK8touchgfx13PainterRGB88818getRenderingMethodEv) referenced from painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
 <LI><a href="#[162]">touchgfx::PainterRGB888::paint(unsigned char*, short, short, short, short, unsigned char) const</a> from painterrgb888.o(i._ZNK8touchgfx13PainterRGB8885paintEPhssssh) referenced from painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
 <LI><a href="#[161]">touchgfx::PainterRGB888::tearDown() const</a> from painterrgb888.o(i._ZNK8touchgfx13PainterRGB8888tearDownEv) referenced from painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
 <LI><a href="#[163]">touchgfx::AbstractPainter::getRenderingMethod() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter18getRenderingMethodEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[163]">touchgfx::AbstractPainter::getRenderingMethod() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter18getRenderingMethodEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
 <LI><a href="#[160]">touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE) referenced from painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
 <LI><a href="#[160]">touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[160]">touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
 <LI><a href="#[164]">touchgfx::AbstractPainter::tearDown() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter8tearDownEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[164]">touchgfx::AbstractPainter::tearDown() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter8tearDownEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
 <LI><a href="#[171]">touchgfx::Box::getSolidRect() const</a> from box.o(i._ZNK8touchgfx3Box12getSolidRectEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[173]">touchgfx::Box::invalidateContent() const</a> from box.o(i._ZNK8touchgfx3Box17invalidateContentEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[170]">touchgfx::Box::draw(const touchgfx::Rect&) const</a> from box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[157]">touchgfx::Circle::getMinimalRect() const</a> from mainviewbase.o(i._ZNK8touchgfx6Circle14getMinimalRectEv) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[157]">touchgfx::Circle::getMinimalRect() const</a> from mainviewbase.o(i._ZNK8touchgfx6Circle14getMinimalRectEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[158]">touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const</a> from circle.o(i._ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[158]">touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const</a> from circle.o(i._ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[181]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[172]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[172]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[172]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[146]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[146]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[146]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[146]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[146]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[146]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[142]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[142]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[142]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[142]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[142]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[142]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[144]">touchgfx::Drawable::invalidateContent() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[144]">touchgfx::Drawable::invalidateContent() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[144]">touchgfx::Drawable::invalidateContent() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[144]">touchgfx::Drawable::invalidateContent() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[144]">touchgfx::Drawable::invalidateContent() const</a> from touchgfxgeneratedhal.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[147]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[147]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
 <LI><a href="#[147]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[147]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[147]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[147]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[184]">touchgfx::LCD24bpp::framebufferFormat() const</a> from lcd24bpp.o(i._ZNK8touchgfx8LCD24bpp17framebufferFormatEv) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
 <LI><a href="#[185]">touchgfx::LCD24bpp::framebufferStride() const</a> from lcd24bpp.o(i._ZNK8touchgfx8LCD24bpp17framebufferStrideEv) referenced from lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
 <LI><a href="#[187]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[186]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[155]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[197]">__main</a> from __main.o(!!!main) referenced from startup_stm32h7b3xxq.o(.text)
 <LI><a href="#[195]">__sti___15_Application_cpp_63cd8d44</a> from application.o(i.__sti___15_Application_cpp_63cd8d44) referenced from application.o(.init_array)
 <LI><a href="#[194]">__sti___21_typedtextdatabase_cpp_05ec7672</a> from typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672) referenced from typedtextdatabase.o(.init_array)
 <LI><a href="#[193]">__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb</a> from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb) referenced from touchgfxgeneratedhal.o(.init_array)
 <LI><a href="#[192]">__sti___25_TouchGFXConfiguration_cpp_f5abfd34</a> from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34) referenced from touchgfxconfiguration.o(.init_array)
 <LI><a href="#[196]">__sti___7_LCD_cpp_86507772</a> from lcd.o(i.__sti___7_LCD_cpp_86507772) referenced from lcd.o(.init_array)
 <LI><a href="#[e7]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[e4]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[e8]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[e3]">videoTaskFunc</a> from touchgfxgeneratedhal.o(i.videoTaskFunc) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[197]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[199]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3d4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d6]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3d7]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1a8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[19c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[19e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3d9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3da]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[3db]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3dc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3dd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3de]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3df]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[3e0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3e1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3e2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3e3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3e4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3e5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3e6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3e7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3e8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3e9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3ea]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3eb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3ec]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1ad]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[3ed]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[3ee]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3ef]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[3f0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[3f1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[3f2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3f3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3f4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[19a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3f5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1a5]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3f6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1a9]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2188 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3f7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1cc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ac]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3f8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1ae]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[24]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3c7]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3c6]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3bb]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[2e2]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::handleTickEvent()
</UL>

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3f9]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>BDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>BDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>BDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>BDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>BDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>BDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>BDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>BDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>BDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DFSDM1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DFSDM1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DFSDM1_FLT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DFSDM1_FLT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DFSDM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>GFXMMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_TAMP_STAMP_CSS_LSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b3xxq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h7b3xxq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b1]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1b4]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1b5]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[1a1]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1b6]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::execute()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pop()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::TimerWidgets::compact()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::framebufferStride() const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888_BilinearInterpolation()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888_NearestNeighbor()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888_NearestNeighbor()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4_NearestNeighbor()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_LZW9()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_RLE()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_L4()
</UL>

<P><STRONG><a name="[399]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3fa]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3fb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3fe]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1bd]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetMemory
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetEnable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeSTR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeDTR
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
</UL>

<P><STRONG><a name="[3ff]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[401]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[1af]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[402]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1c1]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[19f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1c3]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[404]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[405]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[408]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[1a6]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1ab]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c8]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1cd]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[b6]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7b3i_discovery_bus.o(i.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
</UL>
<P><STRONG><a name="[b3]"></a>BSP_I2C4_DeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32h7b3i_discovery_bus.o(i.BSP_I2C4_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BSP_I2C4_DeInit &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
</UL>
<P><STRONG><a name="[b2]"></a>BSP_I2C4_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32h7b3i_discovery_bus.o(i.BSP_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BSP_I2C4_Init &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
</UL>
<P><STRONG><a name="[b4]"></a>BSP_I2C4_ReadReg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7b3i_discovery_bus.o(i.BSP_I2C4_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_I2C4_ReadReg &rArr; I2C4_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
</UL>
<P><STRONG><a name="[b5]"></a>BSP_I2C4_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7b3i_discovery_bus.o(i.BSP_I2C4_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_I2C4_WriteReg &rArr; I2C4_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7b3i_discovery_ts.o(i.FT5336_Probe)
</UL>
<P><STRONG><a name="[1d9]"></a>BSP_OSPI_NOR_ConfigFlash</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32h7b3i_discovery_ospi.o(i.BSP_OSPI_NOR_ConfigFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_ExitOPIMode &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[1dd]"></a>BSP_OSPI_NOR_DeInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7b3i_discovery_ospi.o(i.BSP_OSPI_NOR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_OSPI_NOR_DeInit &rArr; BSP_OSPI_NOR_DisableMemoryMappedMode &rArr; HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_DeInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DisableMemoryMappedMode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[1de]"></a>BSP_OSPI_NOR_DisableMemoryMappedMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7b3i_discovery_ospi.o(i.BSP_OSPI_NOR_DisableMemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_OSPI_NOR_DisableMemoryMappedMode &rArr; HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>

<P><STRONG><a name="[1e2]"></a>BSP_OSPI_NOR_EnableMemoryMappedMode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32h7b3i_discovery_ospi.o(i.BSP_OSPI_NOR_EnableMemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BSP_OSPI_NOR_EnableMemoryMappedMode &rArr; MX25LM51245G_EnableMemoryMappedModeSTR &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeSTR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeDTR
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[1e5]"></a>BSP_OSPI_NOR_Init</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, stm32h7b3i_discovery_ospi.o(i.BSP_OSPI_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = BSP_OSPI_NOR_Init &rArr; BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_ExitOPIMode &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OSPI_NOR_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_GetFlashInfo
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ResetMemory
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[2cd]"></a>BSP_TS_GetState</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32h7b3i_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::sampleTouch(int&, int&)
</UL>

<P><STRONG><a name="[1eb]"></a>BSP_TS_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32h7b3i_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_TS_Init &rArr; FT5336_Probe &rArr; FT5336_ReadID &rArr; ft5336_chip_id &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_Probe
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::init()
</UL>

<P><STRONG><a name="[22]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[304]"></a>CRC_Lock</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32_crc_lock.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[2db]"></a>DMA2D_CopyBuffer</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, hardwaremjpegdecoder.o(i.DMA2D_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2D_CopyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::externalJobExecute()
</UL>

<P><STRONG><a name="[1ed]"></a>DMA2D_ExternalJobCompleted</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.DMA2D_ExternalJobCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DMA2D_ExternalJobCompleted &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::signalDMAInterrupt()
</UL>

<P><STRONG><a name="[80]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>

<P><STRONG><a name="[263]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[266]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[268]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[264]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1c]"></a>FT5336_ClearIT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>FT5336_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>FT5336_DisableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT5336_DisableIT &rArr; ft5336_g_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_g_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>FT5336_EnableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT5336_EnableIT &rArr; ft5336_g_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_g_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>FT5336_GestureConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ft5336.o(i.FT5336_GestureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FT5336_GestureConfig &rArr; ft5336_radian_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_radian_value
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_offset_up_down
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_offset_left_right
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_distance_zoom
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_distance_up_down
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_disatnce_left_right
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>FT5336_GetCapabilities</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ft5336.o(i.FT5336_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT5336_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>FT5336_GetGesture</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_GetGesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT5336_GetGesture &rArr; ft5336_gest_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_gest_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>FT5336_GetMultiTouchState</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, ft5336.o(i.FT5336_GetMultiTouchState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FT5336_GetMultiTouchState &rArr; FT5336_DetectTouch &rArr; ft5336_td_status &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_read_reg
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_DetectTouch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>FT5336_GetState</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ft5336.o(i.FT5336_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT5336_GetState &rArr; FT5336_DetectTouch &rArr; ft5336_td_status &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_read_reg
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_DetectTouch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>FT5336_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>FT5336_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ft5336.o(i.FT5336_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT5336_Init &rArr; FT5336_DisableIT &rArr; ft5336_g_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_DisableIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>FT5336_ReadID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft5336.o(i.FT5336_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FT5336_ReadID &rArr; ft5336_chip_id &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[1fc]"></a>FT5336_RegisterBusIO</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ft5336.o(i.FT5336_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT5336_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_Probe
</UL>

<P><STRONG><a name="[200]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32h7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_CRC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32h7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[202]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[294]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[201]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[207]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ResetMemory
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 324 bytes, Stack size 36 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_DeInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_MspDeInit
</UL>

<P><STRONG><a name="[20d]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_MspInit
</UL>

<P><STRONG><a name="[320]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>

<P><STRONG><a name="[321]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
</UL>

<P><STRONG><a name="[297]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[299]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[29a]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_DeInit
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_WriteReg
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_ReadReg
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[20f]"></a>HAL_I2C_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[211]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_ReadReg
</UL>

<P><STRONG><a name="[216]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_WriteReg
</UL>

<P><STRONG><a name="[20e]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[210]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 122 bytes, Stack size 224 bytes, stm32h7xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[274]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[219]"></a>HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21c]"></a>HAL_InitTick</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, stm32h7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[229]"></a>HAL_JPEG_ConfigInputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_ConfigInputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>

<P><STRONG><a name="[224]"></a>HAL_JPEG_ConfigOutputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_ConfigOutputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>

<P><STRONG><a name="[222]"></a>HAL_JPEG_DataReadyCallback</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_DataReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Pause
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigOutputBuffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutCpltCallback
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[280]"></a>HAL_JPEG_DecodeCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_DecodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[225]"></a>HAL_JPEG_Decode_DMA</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_Decode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_JPEG_Decode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_MDMA_Start_IT &rArr; MDMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Init_Process
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[27f]"></a>HAL_JPEG_EncodeCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_EncodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[282]"></a>HAL_JPEG_ErrorCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutCpltCallback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAInCpltCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAErrorCallback
</UL>

<P><STRONG><a name="[228]"></a>HAL_JPEG_GetDataCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_GetDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_JPEG_GetDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigInputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAInCpltCallback
</UL>

<P><STRONG><a name="[27c]"></a>HAL_JPEG_GetInfo</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_JPEG_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[22a]"></a>HAL_JPEG_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_IRQHandler
</UL>

<P><STRONG><a name="[27d]"></a>HAL_JPEG_InfoReadyCallback</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_InfoReadyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[22d]"></a>HAL_JPEG_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2180<LI>Call Chain = HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>HAL_JPEG_MspInit</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, stm32h7xx_hal_msp.o(i.HAL_JPEG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_JPEG_MspInit &rArr; HAL_MDMA_Init &rArr; MDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_ConfigPostRequestMask
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[223]"></a>HAL_JPEG_Pause</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_Pause))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>

<P><STRONG><a name="[232]"></a>HAL_JPEG_Resume</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.HAL_JPEG_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
</UL>

<P><STRONG><a name="[235]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[238]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>HAL_LTDC_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[239]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[23c]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 238 bytes, Stack size 240 bytes, stm32h7xx_hal_msp.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[23d]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[23a]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[242]"></a>HAL_MDMA_Abort</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MDMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
</UL>

<P><STRONG><a name="[253]"></a>HAL_MDMA_Abort_IT</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[231]"></a>HAL_MDMA_ConfigPostRequestMask</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_ConfigPostRequestMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MDMA_ConfigPostRequestMask
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
</UL>

<P><STRONG><a name="[289]"></a>HAL_MDMA_IRQHandler</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MDMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_IRQHandler
</UL>

<P><STRONG><a name="[230]"></a>HAL_MDMA_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MDMA_Init &rArr; MDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
</UL>

<P><STRONG><a name="[233]"></a>HAL_MDMA_Start_IT</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_MDMA_Start_IT &rArr; MDMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutCpltCallback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAInCpltCallback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
</UL>

<P><STRONG><a name="[28c]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[28b]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[28d]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[21d]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[258]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspDeInit
</UL>

<P><STRONG><a name="[206]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[205]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[21a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_OSPI_Abort</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DisableMemoryMappedMode
</UL>

<P><STRONG><a name="[250]"></a>HAL_OSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[247]"></a>HAL_OSPI_AutoPolling</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_OSPI_AutoPolling &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>

<P><STRONG><a name="[24f]"></a>HAL_OSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_CmdCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[248]"></a>HAL_OSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetMemory
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetEnable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeSTR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeDTR
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_OSPI_DeInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_OSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>

<P><STRONG><a name="[251]"></a>HAL_OSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[24c]"></a>HAL_OSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_FifoThresholdCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>HAL_OSPI_IRQHandler</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_OSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_TxCpltCallback
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_TimeOutCallback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_StatusMatchCallback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_RxCpltCallback
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_FifoThresholdCallback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_ErrorCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_CmdCpltCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCTOSPI1_IRQHandler
</UL>

<P><STRONG><a name="[255]"></a>HAL_OSPI_Init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OSPI_NOR_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[257]"></a>HAL_OSPI_MemoryMapped</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_OSPI_MemoryMapped &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeSTR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_EnableMemoryMappedModeDTR
</UL>

<P><STRONG><a name="[24a]"></a>HAL_OSPI_MspDeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_OSPI_MspDeInit))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_DeInit
</UL>

<P><STRONG><a name="[256]"></a>HAL_OSPI_MspInit</STRONG> (Thumb, 124 bytes, Stack size 208 bytes, stm32h7xx_hal_msp.o(i.HAL_OSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[259]"></a>HAL_OSPI_Receive</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
</UL>

<P><STRONG><a name="[24d]"></a>HAL_OSPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[252]"></a>HAL_OSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_StatusMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[254]"></a>HAL_OSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_TimeOutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[25a]"></a>HAL_OSPI_Transmit</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_OSPI_Transmit &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
</UL>

<P><STRONG><a name="[24e]"></a>HAL_OSPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[20a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2374 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>

<P><STRONG><a name="[25e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[21e]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[25f]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[21f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[21b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[260]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1442 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[261]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[262]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[265]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[267]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[271]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[270]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[273]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[269]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[221]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[26c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26b]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[26d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[272]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>IdleTaskHook</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchgfxhal.o(i.IdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IdleTaskHook &rArr; touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.vApplicationIdleHook)
</UL>
<P><STRONG><a name="[281]"></a>JPEG_Decode_DMA</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hardwaremjpegdecoder.o(i.JPEG_Decode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = JPEG_Decode_DMA &rArr; HAL_JPEG_Decode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_MDMA_Start_IT &rArr; MDMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[93]"></a>JPEG_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JPEG_IRQHandler &rArr; HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[283]"></a>JPEG_OutputHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i.JPEG_OutputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[7e]"></a>LTDC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>MDMA_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.MDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MDMA_IRQHandler &rArr; HAL_MDMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[1ea]"></a>MX25LM51245G_AutoPollingMemReady</STRONG> (Thumb, 238 bytes, Stack size 120 bytes, mx25lm51245g.o(i.MX25LM51245G_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX25LM51245G_AutoPollingMemReady &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[1e3]"></a>MX25LM51245G_EnableMemoryMappedModeDTR</STRONG> (Thumb, 150 bytes, Stack size 112 bytes, mx25lm51245g.o(i.MX25LM51245G_EnableMemoryMappedModeDTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MX25LM51245G_EnableMemoryMappedModeDTR &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_EnableMemoryMappedMode
</UL>

<P><STRONG><a name="[1e4]"></a>MX25LM51245G_EnableMemoryMappedModeSTR</STRONG> (Thumb, 242 bytes, Stack size 120 bytes, mx25lm51245g.o(i.MX25LM51245G_EnableMemoryMappedModeSTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX25LM51245G_EnableMemoryMappedModeSTR &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_EnableMemoryMappedMode
</UL>

<P><STRONG><a name="[1e7]"></a>MX25LM51245G_GetFlashInfo</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, mx25lm51245g.o(i.MX25LM51245G_GetFlashInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX25LM51245G_GetFlashInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[28e]"></a>MX25LM51245G_ReadCfg2Register</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, mx25lm51245g.o(i.MX25LM51245G_ReadCfg2Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MX25LM51245G_ReadCfg2Register &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[28f]"></a>MX25LM51245G_ResetEnable</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, mx25lm51245g.o(i.MX25LM51245G_ResetEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX25LM51245G_ResetEnable &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ResetMemory
</UL>

<P><STRONG><a name="[290]"></a>MX25LM51245G_ResetMemory</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, mx25lm51245g.o(i.MX25LM51245G_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX25LM51245G_ResetMemory &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ResetMemory
</UL>

<P><STRONG><a name="[291]"></a>MX25LM51245G_WriteCfg2Register</STRONG> (Thumb, 198 bytes, Stack size 104 bytes, mx25lm51245g.o(i.MX25LM51245G_WriteCfg2Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX25LM51245G_WriteCfg2Register &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[292]"></a>MX25LM51245G_WriteEnable</STRONG> (Thumb, 280 bytes, Stack size 136 bytes, mx25lm51245g.o(i.MX25LM51245G_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_ExitOPIMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[1d5]"></a>MX_I2C4_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7b3i_discovery_bus.o(i.MX_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[376]"></a>MX_LIBJPEG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, libjpeg.o(i.MX_LIBJPEG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>MX_OSPI_NOR_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7b3i_discovery_ospi.o(i.MX_OSPI_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MX_OSPI_NOR_Init &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[29d]"></a>MX_TouchGFX_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_touchgfx.o(i.MX_TouchGFX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MX_TouchGFX_Init &rArr; touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[377]"></a>MX_TouchGFX_PreOSInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_touchgfx.o(i.MX_TouchGFX_PreOSInit))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.OCTOSPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OCTOSPI1_IRQHandler &rArr; HAL_OSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2a4]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 128 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>SystemInit</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, system_stm32h7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[26a]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e2]"></a>TouchGFX_Task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_touchgfx.o(i.TouchGFX_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TouchGFX_Task &rArr; touchgfx_taskEntry &rArr; TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[23]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b3xxq.o(RESET)
</UL>
<P><STRONG><a name="[2a6]"></a>getFont_verdana_10_4bpp()</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = getFont_verdana_10_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[2a9]"></a>getFont_verdana_20_4bpp()</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, table_verdana_20_4bpp.o(i._Z23getFont_verdana_20_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = getFont_verdana_20_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[2aa]"></a>getFont_verdana_40_4bpp()</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = getFont_verdana_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[ec]"></a>TouchGFXHAL::initialize()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CortexMMCUInstrumentation::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[fa]"></a>TouchGFXHAL::enableInterrupts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::enableInterrupts() &rArr; TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[ee]"></a>TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[fb]"></a>TouchGFXHAL::disableInterrupts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::disableInterrupts() &rArr; TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[106]"></a>TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt))
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[f9]"></a>TouchGFXHAL::configureInterrupts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::configureInterrupts() &rArr; TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[fc]"></a>TouchGFXHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv))
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[ed]"></a>TouchGFXHAL::taskEntry()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL9taskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[e0]"></a>TouchGFXHAL::~TouchGFXHAL()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[409]"></a>TouchGFXHAL::~TouchGFXHAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev), UNUSED)

<P><STRONG><a name="[2b3]"></a>FrontendHeap::FrontendHeap()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FrontendHeap::FrontendHeap() &rArr; FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD24bpp::enableTextureMapperAll() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::AbstractPartition__sub_object()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotomainScreenNoTransition()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[40a]"></a>FrontendHeap::FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev), UNUSED)

<P><STRONG><a name="[e5]"></a>FrontendHeap::~FrontendHeap()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrontendHeap::~FrontendHeap()
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::~FrontendApplicationBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.touchgfx_init)
<LI> touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[40b]"></a>FrontendHeap::~FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev), UNUSED)

<P><STRONG><a name="[10e]"></a>mainViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainviewbase.o(i._ZN12mainViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
</UL>
<P><STRONG><a name="[2b8]"></a>mainViewBase::mainViewBase()</STRONG> (Thumb, 10218 bytes, Stack size 40 bytes, mainviewbase.o(i._ZN12mainViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mainViewBase::mainViewBase() &rArr; touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::Circle()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::mainView()
</UL>

<P><STRONG><a name="[40c]"></a>mainViewBase::mainViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, mainviewbase.o(i._ZN12mainViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[10c]"></a>mainViewBase::~mainViewBase()</STRONG> (Thumb, 1054 bytes, Stack size 8 bytes, mainviewbase.o(i._ZN12mainViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mainViewBase::~mainViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::resetBuffer()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;mainPresenter&rang;::~View()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::~mainView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
</UL>
<P><STRONG><a name="[40d]"></a>mainViewBase::~mainViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainviewbase.o(i._ZN12mainViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[117]"></a>mainPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainpresenter.o(i._ZN13mainPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpresenter.o(.constdata__ZTV13mainPresenter)
</UL>
<P><STRONG><a name="[116]"></a>mainPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainpresenter.o(i._ZN13mainPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpresenter.o(.constdata__ZTV13mainPresenter)
</UL>
<P><STRONG><a name="[3d2]"></a>mainPresenter::mainPresenter(mainView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mainpresenter.o(i._ZN13mainPresenterC1ER8mainView))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[40e]"></a>mainPresenter::mainPresenter__sub_object(mainView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainpresenter.o(i._ZN13mainPresenterC1ER8mainView), UNUSED)

<P><STRONG><a name="[118]"></a>mainPresenter::~mainPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainpresenter.o(i._ZN13mainPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpresenter.o(.constdata__ZTV13mainPresenter)
</UL>
<P><STRONG><a name="[40f]"></a>mainPresenter::~mainPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainpresenter.o(i._ZN13mainPresenterD1Ev), UNUSED)

<P><STRONG><a name="[3b7]"></a>BitmapDatabase::getInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[3b6]"></a>BitmapDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[324]"></a>TypedTextDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[323]"></a>TypedTextDatabase::getFonts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase8getFontsEv))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[11d]"></a>FrontendApplication::handleTickEvent()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = FrontendApplication::handleTickEvent() &rArr; touchgfx::Application::handleTickEvent() &rArr; touchgfx::Application::TimerWidgets::compact() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
</UL>
<P><STRONG><a name="[2b6]"></a>FrontendApplication::FrontendApplication(Model&, FrontendHeap&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD24bpp::enableTextureMapperAll() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[410]"></a>FrontendApplication::FrontendApplication__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[124]"></a>HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned) &rArr; HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned) &rArr; JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU32(unsigned)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU16(unsigned)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[2c9]"></a>HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhjPhttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned) &rArr; JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode_DMA
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[127]"></a>HardwareMJPEGDecoder::getNumberOfFrames()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder17getNumberOfFramesEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[2c7]"></a>HardwareMJPEGDecoder::getU16(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder6getU16Ej))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[2c8]"></a>HardwareMJPEGDecoder::getU32(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder6getU32Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareMJPEGDecoder::getU32(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::gotoFrame(unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[2c6]"></a>HardwareMJPEGDecoder::readData(unsigned, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder8readDataEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = HardwareMJPEGDecoder::readData(unsigned, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::gotoFrame(unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[125]"></a>HardwareMJPEGDecoder::gotoFrame(unsigned)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder9gotoFrameEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = HardwareMJPEGDecoder::gotoFrame(unsigned) &rArr; HardwareMJPEGDecoder::readData(unsigned, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU32(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[2cb]"></a>HardwareMJPEGDecoder::HardwareMJPEGDecoder()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HardwareMJPEGDecoder::HardwareMJPEGDecoder() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
</UL>

<P><STRONG><a name="[411]"></a>HardwareMJPEGDecoder::HardwareMJPEGDecoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoderC1Ev), UNUSED)

<P><STRONG><a name="[d8]"></a>HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
<LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[412]"></a>HardwareMJPEGDecoder::~HardwareMJPEGDecoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev), UNUSED)

<P><STRONG><a name="[129]"></a>STM32TouchController::sampleTouch(int&, int&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STM32TouchController::sampleTouch(int&, int&) &rArr; BSP_TS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[128]"></a>STM32TouchController::init()</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STM32TouchController::init() &rArr; BSP_TS_Init &rArr; FT5336_Probe &rArr; FT5336_ReadID &rArr; ft5336_chip_id &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[db]"></a>STM32TouchController::~STM32TouchController()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[413]"></a>STM32TouchController::~STM32TouchController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev), UNUSED)

<P><STRONG><a name="[10b]"></a>TouchGFXGeneratedHAL::FlushCache()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXGeneratedHAL::FlushCache()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[104]"></a>TouchGFXGeneratedHAL::beginFrame()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10beginFrameEv))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[2ab]"></a>TouchGFXGeneratedHAL::initialize()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>

<P><STRONG><a name="[10a]"></a>TouchGFXGeneratedHAL::InvalidateCache()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXGeneratedHAL::InvalidateCache()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[2ac]"></a>TouchGFXGeneratedHAL::enableInterrupts()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableInterrupts()
</UL>

<P><STRONG><a name="[2ad]"></a>TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[2ae]"></a>TouchGFXGeneratedHAL::disableInterrupts()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::disableInterrupts()
</UL>

<P><STRONG><a name="[2af]"></a>TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::setTFTFrameBuffer(unsigned short*)
</UL>

<P><STRONG><a name="[f2]"></a>TouchGFXGeneratedHAL::unlockFrameBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TouchGFXGeneratedHAL::unlockFrameBuffer() &rArr; touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[2b0]"></a>TouchGFXGeneratedHAL::configureInterrupts()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::configureInterrupts()
</UL>

<P><STRONG><a name="[2b1]"></a>TouchGFXGeneratedHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableLCDControllerInterrupt()
</UL>

<P><STRONG><a name="[105]"></a>TouchGFXGeneratedHAL::endFrame()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TouchGFXGeneratedHAL::endFrame() &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::endFrame()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[df]"></a>ApplicationFontProvider::~ApplicationFontProvider()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
</UL>
<P><STRONG><a name="[414]"></a>ApplicationFontProvider::~ApplicationFontProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev), UNUSED)

<P><STRONG><a name="[2b7]"></a>FrontendApplicationBase::gotomainScreenNoTransition()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[ea]"></a>FrontendApplicationBase::gotomainScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FrontendApplicationBase::gotomainScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; mainView::mainView() &rArr; mainViewBase::mainViewBase() &rArr; touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[2c5]"></a>FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD24bpp::enableTextureMapperAll() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_All()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperAll()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[415]"></a>FrontendApplicationBase::FrontendApplicationBase__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[12b]"></a>FrontendApplicationBase::~FrontendApplicationBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
</UL>
<P><STRONG><a name="[416]"></a>FrontendApplicationBase::~FrontendApplicationBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::~DedicatedBufferController()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE)
</UL>
<P><STRONG><a name="[417]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::~DedicatedBufferController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev), UNUSED)

<P><STRONG><a name="[2c4]"></a>Model::tick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(i._ZN5Model4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>

<P><STRONG><a name="[2b5]"></a>Model::Model()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[418]"></a>Model::Model__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev), UNUSED)

<P><STRONG><a name="[132]"></a>STM32DMA::getDMAType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA10getDMATypeEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[12f]"></a>STM32DMA::initialize()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[12c]"></a>STM32DMA::getBlitCaps()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA11getBlitCapsEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[136]"></a>STM32DMA::setupDataCopy(const touchgfx::BlitOp&)</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32dma.o(i._ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = STM32DMA::setupDataCopy(const touchgfx::BlitOp&) &rArr; STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[137]"></a>STM32DMA::setupDataFill(const touchgfx::BlitOp&)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32dma.o(i._ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = STM32DMA::setupDataFill(const touchgfx::BlitOp&) &rArr; STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[2da]"></a>STM32DMA::externalJobExecute()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA18externalJobExecuteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STM32DMA::externalJobExecute() &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::start()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::signalDMAInterrupt()
</UL>

<P><STRONG><a name="[131]"></a>STM32DMA::signalDMAInterrupt()</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32dma.o(i._ZN8STM32DMA18signalDMAInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STM32DMA::signalDMAInterrupt() &rArr; DMA2D_ExternalJobCompleted &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_ExternalJobCompleted
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::externalJobExecute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[2d8]"></a>STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[2d9]"></a>STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[130]"></a>STM32DMA::start()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STM32DMA::start() &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::externalJobExecute()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[2de]"></a>STM32DMA::STM32DMA()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32dma.o(i._ZN8STM32DMAC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STM32DMA::STM32DMA() &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[419]"></a>STM32DMA::STM32DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, stm32dma.o(i._ZN8STM32DMAC1Ev), UNUSED)

<P><STRONG><a name="[dc]"></a>STM32DMA::~STM32DMA()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[41a]"></a>STM32DMA::~STM32DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMAD1Ev), UNUSED)

<P><STRONG><a name="[13c]"></a>mainView::setupScreen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainview.o(i._ZN8mainView11setupScreenEv))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainview.o(.constdata__ZTV8mainView)
</UL>
<P><STRONG><a name="[13d]"></a>mainView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainview.o(i._ZN8mainView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> mainview.o(.constdata__ZTV8mainView)
</UL>
<P><STRONG><a name="[13e]"></a>mainView::handleTickEvent()</STRONG> (Thumb, 7050 bytes, Stack size 808 bytes, mainview.o(i._ZN8mainView15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mainView::handleTickEvent() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainview.o(.constdata__ZTV8mainView)
</UL>
<P><STRONG><a name="[2e3]"></a>mainView::mainView()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mainview.o(i._ZN8mainViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mainView::mainView() &rArr; mainViewBase::mainViewBase() &rArr; touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[41b]"></a>mainView::mainView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainview.o(i._ZN8mainViewC1Ev), UNUSED)

<P><STRONG><a name="[13b]"></a>mainView::~mainView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainview.o(i._ZN8mainViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mainView::~mainView() &rArr; mainViewBase::~mainViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::~mainViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainview.o(.constdata__ZTV8mainView)
</UL>
<P><STRONG><a name="[41c]"></a>mainView::~mainView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainview.o(i._ZN8mainViewD1Ev), UNUSED)

<P><STRONG><a name="[332]"></a>touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[41d]"></a>touchgfx::ClickEvent::ClickEvent__sub_object(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss), UNUSED)

<P><STRONG><a name="[2e4]"></a>touchgfx::OSWrappers::initialize()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[23e]"></a>touchgfx::OSWrappers::signalVSync()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers11signalVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[2b2]"></a>touchgfx::OSWrappers::waitForVSync()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers12waitForVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
</UL>

<P><STRONG><a name="[2e8]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphore()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[2e9]"></a>touchgfx::OSWrappers::takeFrameBufferSemaphore()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[2ea]"></a>touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[2eb]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::executeCompleted()
</UL>

<P><STRONG><a name="[2ec]"></a>touchgfx::Rasterizer::lineTo(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[2ef]"></a>touchgfx::Rasterizer::moveTo(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[2f1]"></a>touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char) &rArr; touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::calculateAlpha(int) const
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>touchgfx::Transition::invalidate()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Transition::invalidate()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[15e]"></a>touchgfx::Transition::setScreenContainer(touchgfx::Container&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[15c]"></a>touchgfx::Transition::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[15b]"></a>touchgfx::Transition::tearDown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[121]"></a>touchgfx::Application::invalidate()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Application::invalidate() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[2ce]"></a>touchgfx::Application::getInstance()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::invalidate()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::MoveAnimator&lang;touchgfx::Circle&rang;::nextMoveAnimationStep()
</UL>

<P><STRONG><a name="[303]"></a>touchgfx::Application::TimerWidgets::tickActive()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11Application12TimerWidgets10tickActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Application::TimerWidgets::tickActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
</UL>

<P><STRONG><a name="[306]"></a>touchgfx::Application::TimerWidgets::clear()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application12TimerWidgets5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[3d1]"></a>touchgfx::Application::TimerWidgets::remove(const touchgfx::Drawable*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::MoveAnimator&lang;touchgfx::Circle&rang;::nextMoveAnimationStep()
</UL>

<P><STRONG><a name="[2f5]"></a>touchgfx::Application::TimerWidgets::compact()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application12TimerWidgets7compactEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::TimerWidgets::compact() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
</UL>

<P><STRONG><a name="[11c]"></a>touchgfx::Application::handleKeyEvent(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application14handleKeyEventEh))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[122]"></a>touchgfx::Application::invalidateArea(touchgfx::Rect)</STRONG> (Thumb, 1742 bytes, Stack size 64 bytes, application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::restrictTo(short, short)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[120]"></a>touchgfx::Application::drawCachedAreas()</STRONG> (Thumb, 1180 bytes, Stack size 144 bytes, application.o(i._ZN8touchgfx11Application15drawCachedAreasEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::drawCachedAreas() &rArr; touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[11a]"></a>touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[12a]"></a>touchgfx::Application::handleTickEvent()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11Application15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::handleTickEvent() &rArr; touchgfx::Application::TimerWidgets::compact() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::TimerWidgets::compact()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::TimerWidgets::tickActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[11f]"></a>touchgfx::Application::clearCachedAreas()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16clearCachedAreasEv))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[119]"></a>touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[11b]"></a>touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[13f]"></a>touchgfx::Application::handlePendingScreenTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[123]"></a>touchgfx::Application::draw(touchgfx::Rect&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11Application4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::Application::draw(touchgfx::Rect&) &rArr; touchgfx::Rect::restrictTo(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::restrictTo(short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[2d4]"></a>touchgfx::Application::Application()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::TimerWidgets::clear()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[41e]"></a>touchgfx::Application::Application__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev), UNUSED)

<P><STRONG><a name="[3b8]"></a>touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontmanager.o(i._ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[307]"></a>touchgfx::CanvasWidget::CanvasWidget__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::Circle()
</UL>

<P><STRONG><a name="[34d]"></a>touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_16GestureEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[41f]"></a>touchgfx::GestureEvent::GestureEvent__sub_object(touchgfx::GestureEvent::GestureEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_16GestureEventTypeEsss), UNUSED)

<P><STRONG><a name="[15a]"></a>touchgfx::NoTransition::handleTickEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[159]"></a>touchgfx::NoTransition::~NoTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[420]"></a>touchgfx::NoTransition::~NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev), UNUSED)

<P><STRONG><a name="[12d]"></a>touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&) &rArr; touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[138]"></a>touchgfx::DMA_Interface::enableAlpha(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[139]"></a>touchgfx::DMA_Interface::disableAlpha()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[135]"></a>touchgfx::DMA_Interface::seedExecution()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[315]"></a>touchgfx::DMA_Interface::isDmaQueueEmpty()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[134]"></a>touchgfx::DMA_Interface::executeCompleted()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::executeCompleted() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[13a]"></a>touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::waitForFrameBufferSemaphore() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[12e]"></a>touchgfx::DMA_Interface::flush()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[133]"></a>touchgfx::DMA_Interface::execute()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = touchgfx::DMA_Interface::execute() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[2a8]"></a>touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
</UL>

<P><STRONG><a name="[421]"></a>touchgfx::GeneratedFont::GeneratedFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE), UNUSED)

<P><STRONG><a name="[be]"></a>touchgfx::GeneratedFont::~GeneratedFont()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev))
<BR>[Address Reference Count : 4]<UL><LI> table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv)
<LI> table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
<LI> table_verdana_20_4bpp.o(i._Z23getFont_verdana_20_4bppv)
<LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[422]"></a>touchgfx::GeneratedFont::~GeneratedFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev), UNUSED)

<P><STRONG><a name="[11e]"></a>touchgfx::MVPApplication::handlePendingScreenTransition()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::MVPApplication::handlePendingScreenTransition()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
</UL>
<P><STRONG><a name="[311]"></a>touchgfx::AbstractPainter::AbstractPainter__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx15AbstractPainterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object()
</UL>

<P><STRONG><a name="[30a]"></a>touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[30c]"></a>touchgfx::TouchCalibration::clzu(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration4clzuEj))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[30b]"></a>touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)</STRONG> (Thumb, 154 bytes, Stack size 44 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration6muldivEiiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>

<P><STRONG><a name="[30d]"></a>touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</STRONG> (Thumb, 234 bytes, Stack size 52 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration7muldivuEjjjjjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[2b4]"></a>touchgfx::AbstractPartition::AbstractPartition__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[423]"></a>touchgfx::AbstractPartition::~AbstractPartition()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev), UNUSED)

<P><STRONG><a name="[165]"></a>touchgfx::AbstractPartition::~AbstractPartition__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
</UL>
<P><STRONG><a name="[168]"></a>touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[169]"></a>touchgfx::LockFreeDMA_Queue::pop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pop() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[16a]"></a>touchgfx::LockFreeDMA_Queue::first()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[167]"></a>touchgfx::LockFreeDMA_Queue::isFull()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[166]"></a>touchgfx::LockFreeDMA_Queue::isEmpty()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[2df]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
</UL>

<P><STRONG><a name="[424]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue__sub_object(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm), UNUSED)

<P><STRONG><a name="[16e]"></a>touchgfx::MCUInstrumentation::getCCConsumed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[16f]"></a>touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[2c2]"></a>touchgfx::CanvasWidgetRenderer::resetBuffer()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::~mainViewBase()
</UL>

<P><STRONG><a name="[2bd]"></a>touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[30e]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::CanvasWidgetRenderer::getOutlineBuffer() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[310]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::CanvasWidgetRenderer::getOutlineBufferSize() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[30f]"></a>touchgfx::CanvasWidgetRenderer::hasBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
</UL>

<P><STRONG><a name="[2bc]"></a>touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx21AbstractPainterRGB888C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::AbstractPainter__sub_object()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[302]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[312]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[313]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[300]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
</UL>

<P><STRONG><a name="[31b]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[374]"></a>touchgfx::VectorFontRendererImpl::VectorFontRendererImpl()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vectorfontrendererimpl.o(i._ZN8touchgfx22VectorFontRendererImplC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[425]"></a>touchgfx::VectorFontRendererImpl::VectorFontRendererImpl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectorfontrendererimpl.o(i._ZN8touchgfx22VectorFontRendererImplC1Ev), UNUSED)

<P><STRONG><a name="[de]"></a>touchgfx::VectorFontRendererImpl::~VectorFontRendererImpl()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx22VectorFontRendererImplD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> vectorfontrendererimpl.o(.constdata__ZTVN8touchgfx22VectorFontRendererImplE)
</UL>
<P><STRONG><a name="[426]"></a>touchgfx::VectorFontRendererImpl::~VectorFontRendererImpl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx22VectorFontRendererImplD1Ev), UNUSED)

<P><STRONG><a name="[16c]"></a>touchgfx::CortexMMCUInstrumentation::getCPUCycles()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[16d]"></a>touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[16b]"></a>touchgfx::CortexMMCUInstrumentation::init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CortexMMCUInstrumentation::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[2ba]"></a>touchgfx::Box::Box()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mainviewbase.o(i._ZN8touchgfx3BoxC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Box::Box() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[427]"></a>touchgfx::Box::Box__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainviewbase.o(i._ZN8touchgfx3BoxC1Ev), UNUSED)

<P><STRONG><a name="[17a]"></a>touchgfx::HAL::FlushCache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10FlushCacheEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[177]"></a>touchgfx::HAL::beginFrame()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10beginFrameEv))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[102]"></a>touchgfx::HAL::getDMAType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[174]"></a>touchgfx::HAL::initialize()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f4]"></a>touchgfx::HAL::getBlitCaps()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[279]"></a>touchgfx::HAL::setMCUActive(bool)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTaskHook
</UL>

<P><STRONG><a name="[179]"></a>touchgfx::HAL::InvalidateCache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL15InvalidateCacheEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f8]"></a>touchgfx::HAL::backPorchExited()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::backPorchExited() &rArr; touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f1]"></a>touchgfx::HAL::lockFrameBuffer()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::HAL::lockFrameBuffer() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::isDmaQueueEmpty()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[175]"></a>touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[23f]"></a>touchgfx::HAL::swapFrameBuffers()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL16swapFrameBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::backPorchExited()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[ef]"></a>touchgfx::HAL::allowDMATransfers()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[101]"></a>touchgfx::HAL::getTFTCurrentLine()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[176]"></a>touchgfx::HAL::unlockFrameBuffer()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::unlockFrameBuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[308]"></a>touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>

<P><STRONG><a name="[fe]"></a>touchgfx::HAL::setAnimationStorage(void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[316]"></a>touchgfx::HAL::getClientFrameBuffer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL20getClientFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[f7]"></a>touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[eb]"></a>touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ff]"></a>touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[fd]"></a>touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[109]"></a>touchgfx::HAL::performDisplayOrientationChange()</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::performDisplayOrientationChange()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[319]"></a>touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod) &rArr; touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
</UL>

<P><STRONG><a name="[2d5]"></a>touchgfx::HAL::lcd()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx3HAL3lcdEv))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
</UL>

<P><STRONG><a name="[103]"></a>touchgfx::HAL::tick()</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::tick()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[107]"></a>touchgfx::HAL::touch(int, int)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL5touchEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::HAL::touch(int, int) &rArr; touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[108]"></a>touchgfx::HAL::noTouch()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL7noTouchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::HAL::noTouch() &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f6]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f5]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[178]"></a>touchgfx::HAL::endFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::endFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f0]"></a>touchgfx::HAL::flushDMA()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL8flushDMAEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[100]"></a>touchgfx::HAL::taskDelay(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[375]"></a>touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, touchgfxconfiguration.o(i._ZN8touchgfx3HALC2ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[34e]"></a>touchgfx::LCD::div255(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx3LCD6div255Et))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[348]"></a>touchgfx::Cell::set(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx4Cell3setEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[349]"></a>touchgfx::Cell::addCover(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx4Cell8addCoverEii))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
</UL>

<P><STRONG><a name="[31f]"></a>touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3getENS0_7GPIO_IDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
</UL>

<P><STRONG><a name="[240]"></a>touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3setENS0_7GPIO_IDE))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[314]"></a>touchgfx::GPIO::init()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::GPIO::init() &rArr; touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[241]"></a>touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[317]"></a>touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE))
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>

<P><STRONG><a name="[2f6]"></a>touchgfx::Rect::restrictTo(short, short)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, application.o(i._ZN8touchgfx4Rect10restrictToEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Rect::restrictTo(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[2fe]"></a>touchgfx::Rect::expandToFit(const touchgfx::Rect&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx4Rect11expandToFitERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[2f4]"></a>touchgfx::Rect::Rect(short, short, short, short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx4RectC1Essss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidate()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[428]"></a>touchgfx::Rect::Rect__sub_object(short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx4RectC1Essss), UNUSED)

<P><STRONG><a name="[e9]"></a>touchgfx::Rect::Rect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx4RectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getSolidRect() const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getSolidRect() const
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_Application_cpp_63cd8d44
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
</UL>
<P><STRONG><a name="[429]"></a>touchgfx::Rect::Rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx4RectC1Ev), UNUSED)

<P><STRONG><a name="[301]"></a>touchgfx::Rect::operator &=(const touchgfx::Rect&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx4RectaNERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[2c3]"></a>touchgfx::View&lang;mainPresenter&rang;::~View()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainviewbase.o(i._ZN8touchgfx4ViewI13mainPresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::~mainViewBase()
</UL>

<P><STRONG><a name="[42a]"></a>touchgfx::View&lang;mainPresenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainviewbase.o(i._ZN8touchgfx4ViewI13mainPresenterED1Ev), UNUSED)

<P><STRONG><a name="[34a]"></a>touchgfx::clzu(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, utils.o(i._ZN8touchgfx4clzuEj))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
</UL>

<P><STRONG><a name="[2bf]"></a>touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mainview.o(i._ZN8touchgfx5Color15getColorFromRGBEhhh))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::handleTickEvent()
</UL>

<P><STRONG><a name="[322]"></a>touchgfx::Texts::setLanguage(unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, texts.o(i._ZN8touchgfx5Texts11setLanguageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Texts::setLanguage(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getFonts()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstanceSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[362]"></a>touchgfx::paint::rgb888::lineFromColor(unsigned char*, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32dma.o(i._ZN8touchgfx5paint6rgb88813lineFromColorEPhjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::paint::rgb888::lineFromColor(unsigned char*, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB888::paint(unsigned char*, short, short, short, short, unsigned char) const
</UL>

<P><STRONG><a name="[363]"></a>touchgfx::paint::tearDown()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx5paint8tearDownEv))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB888::tearDown() const
</UL>

<P><STRONG><a name="[327]"></a>touchgfx::Bitmap::clearCache()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap10clearCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[325]"></a>touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[326]"></a>touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bitmap.o(i._ZN8touchgfx6Bitmap8setCacheEPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::clearCache()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[c0]"></a>touchgfx::BlitOp::BlitOp()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN8STM32DMAC1Ev)
</UL>
<P><STRONG><a name="[42b]"></a>touchgfx::BlitOp::BlitOp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev), UNUSED)

<P><STRONG><a name="[328]"></a>touchgfx::Canvas::close()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx6Canvas5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = touchgfx::Canvas::close() &rArr; touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[17c]"></a>touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
</UL>
<P><STRONG><a name="[32b]"></a>touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Canvas::close() &rArr; touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[32c]"></a>touchgfx::Canvas::render(unsigned char)</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, canvas.o(i._ZN8touchgfx6Canvas6renderEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = touchgfx::Canvas::render(unsigned char) &rArr; touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char) &rArr; touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[32d]"></a>touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::Outline::Outline() &rArr; touchgfx::Outline::reset() &rArr; touchgfx::CanvasWidgetRenderer::getOutlineBufferSize() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[42c]"></a>touchgfx::Canvas::Canvas__sub_object(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h), UNUSED)

<P><STRONG><a name="[17b]"></a>touchgfx::Canvas::~Canvas()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, circle.o(i._ZN8touchgfx6CanvasD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::~Canvas()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::~Outline()
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
</UL>
<P><STRONG><a name="[42d]"></a>touchgfx::Canvas::~Canvas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, circle.o(i._ZN8touchgfx6CanvasD1Ev), UNUSED)

<P><STRONG><a name="[2bb]"></a>touchgfx::Circle::Circle()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, circle.o(i._ZN8touchgfx6CircleC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::Circle::Circle() &rArr; touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[42e]"></a>touchgfx::Circle::Circle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, circle.o(i._ZN8touchgfx6CircleC1Ev), UNUSED)

<P><STRONG><a name="[17e]"></a>touchgfx::Screen::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen11setupScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[3d3]"></a>touchgfx::Screen::bindTransition(touchgfx::Transition&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[115]"></a>touchgfx::Screen::handleKeyEvent(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainview.o(i._ZN8touchgfx6Screen14handleKeyEventEh))
<BR>[Address Reference Count : 3]<UL><LI> mainview.o(.constdata__ZTV8mainView)
<LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[110]"></a>touchgfx::Screen::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv))
<BR>[Address Reference Count : 2]<UL><LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[10f]"></a>touchgfx::Screen::afterTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainview.o(i._ZN8touchgfx6Screen15afterTransitionEv))
<BR>[Address Reference Count : 3]<UL><LI> mainview.o(.constdata__ZTV8mainView)
<LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[112]"></a>touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainview.o(.constdata__ZTV8mainView)
<LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[114]"></a>touchgfx::Screen::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainviewbase.o(i._ZN8touchgfx6Screen15handleTickEventEv))
<BR>[Address Reference Count : 2]<UL><LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[111]"></a>touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainview.o(.constdata__ZTV8mainView)
<LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[113]"></a>touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainview.o(.constdata__ZTV8mainView)
<LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[2c0]"></a>touchgfx::Screen::add(touchgfx::Drawable&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainviewbase.o(i._ZN8touchgfx6Screen3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Screen::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[10d]"></a>touchgfx::Screen::draw(touchgfx::Rect&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Screen::draw(touchgfx::Rect&) &rArr; touchgfx::Screen::startSMOC(const touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainview.o(.constdata__ZTV8mainView)
<LI> mainviewbase.o(.constdata__ZTV12mainViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[305]"></a>touchgfx::Screen::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[335]"></a>touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[334]"></a>touchgfx::Screen::startSMOC(const touchgfx::Rect&)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, screen.o(i._ZN8touchgfx6Screen9startSMOCERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Screen::startSMOC(const touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>

<P><STRONG><a name="[2b9]"></a>touchgfx::Screen::Screen()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[42f]"></a>touchgfx::Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[17d]"></a>touchgfx::Screen::~Screen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[430]"></a>touchgfx::Screen::~Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev), UNUSED)

<P><STRONG><a name="[145]"></a>touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE))
<BR>[Address Reference Count : 4]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[339]"></a>touchgfx::muldiv(int, int, int, int&)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, utils.o(i._ZN8touchgfx6muldivEiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[33b]"></a>touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, circle.o(i._ZN8touchgfx7CWRUtil4sineENS0_2Q5E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[33d]"></a>touchgfx::CWRUtil::sine(int)</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, circle.o(i._ZN8touchgfx7CWRUtil4sineEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[33e]"></a>touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, circle.o(i._ZN8touchgfx7CWRUtil6cosineENS0_2Q5E))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[347]"></a>touchgfx::Outline::addCurCell()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7Outline10addCurCellEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
</UL>

<P><STRONG><a name="[340]"></a>touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)</STRONG> (Thumb, 244 bytes, Stack size 352 bytes, outline.o(i._ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lessThan(const touchgfx::Cell*, const touchgfx::Cell*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
</UL>

<P><STRONG><a name="[343]"></a>touchgfx::Outline::renderLine(int, int, int, int)</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, outline.o(i._ZN8touchgfx7Outline10renderLineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>

<P><STRONG><a name="[345]"></a>touchgfx::Outline::setCurCell(int, int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline10setCurCellEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Outline::setCurCell(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::addCurCell()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>

<P><STRONG><a name="[346]"></a>touchgfx::Outline::setCurCellNew(int, int)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline13setCurCellNewEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::addCurCell()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[344]"></a>touchgfx::Outline::renderScanline(int, int, int, int, int)</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, outline.o(i._ZN8touchgfx7Outline14renderScanlineEiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::addCover(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[2ed]"></a>touchgfx::Outline::wasOutlineTooComplex()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canvas.o(i._ZN8touchgfx7Outline20wasOutlineTooComplexEv))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>

<P><STRONG><a name="[2f2]"></a>touchgfx::Outline::closeOutlineAndSortCells()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7Outline24closeOutlineAndSortCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::addCurCell()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[32f]"></a>touchgfx::Outline::reset()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, outline.o(i._ZN8touchgfx7Outline5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::reset() &rArr; touchgfx::CanvasWidgetRenderer::getOutlineBufferSize() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>

<P><STRONG><a name="[2ee]"></a>touchgfx::Outline::lineTo(int, int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>

<P><STRONG><a name="[2f0]"></a>touchgfx::Outline::moveTo(int, int)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, outline.o(i._ZN8touchgfx7Outline6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>

<P><STRONG><a name="[342]"></a>touchgfx::Outline::lessThan(const touchgfx::Cell*, const touchgfx::Cell*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7Outline8lessThanEPKNS_4CellES3_))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>

<P><STRONG><a name="[341]"></a>touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7Outline9swapCellsEPNS_4CellES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>

<P><STRONG><a name="[32e]"></a>touchgfx::Outline::Outline()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::Outline::Outline() &rArr; touchgfx::Outline::reset() &rArr; touchgfx::CanvasWidgetRenderer::getOutlineBufferSize() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[431]"></a>touchgfx::Outline::Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev), UNUSED)

<P><STRONG><a name="[17f]"></a>touchgfx::Outline::~Outline()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> outline.o(.constdata__ZTVN8touchgfx7OutlineE)
</UL>
<P><STRONG><a name="[432]"></a>touchgfx::Outline::~Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev), UNUSED)

<P><STRONG><a name="[33a]"></a>touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, utils.o(i._ZN8touchgfx7muldivuEjjjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
</UL>

<P><STRONG><a name="[2be]"></a>touchgfx::Drawable::setPosition(short, short, short, short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mainviewbase.o(i._ZN8touchgfx8Drawable11setPositionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
</UL>

<P><STRONG><a name="[150]"></a>touchgfx::Drawable::moveRelative(short, short)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::moveRelative(short, short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[338]"></a>touchgfx::Drawable::getCachedAbsX()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsX() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[337]"></a>touchgfx::Drawable::getCachedAbsY()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsY() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[152]"></a>touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_))
<BR>[Address Reference Count : 5]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[14e]"></a>touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[14f]"></a>touchgfx::Drawable::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable15handleTickEventEv))
<BR>[Address Reference Count : 5]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[14c]"></a>touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[14d]"></a>touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[336]"></a>touchgfx::Drawable::getCachedVisibleRect()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx8Drawable20getCachedVisibleRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::getCachedVisibleRect() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[148]"></a>touchgfx::Drawable::setX(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setXEs))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[149]"></a>touchgfx::Drawable::setY(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable4setYEs))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[34b]"></a>touchgfx::Drawable::setXY(short, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drawable.o(i._ZN8touchgfx8Drawable5setXYEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveRelative(short, short)
</UL>

<P><STRONG><a name="[151]"></a>touchgfx::Drawable::moveTo(short, short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable6moveToEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Drawable::moveTo(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::MoveAnimator&lang;touchgfx::Circle&rang;::nextMoveAnimationStep()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[14a]"></a>touchgfx::Drawable::setWidth(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable8setWidthEs))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[14b]"></a>touchgfx::Drawable::setHeight(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx8Drawable9setHeightEs))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[31c]"></a>touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gestures.o(i._ZN8touchgfx8Gestures17registerDragEventEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[31d]"></a>touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, gestures.o(i._ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::noTouch()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[318]"></a>touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)
</UL>

<P><STRONG><a name="[31a]"></a>touchgfx::Gestures::tick()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
</UL>

<P><STRONG><a name="[183]"></a>touchgfx::LCD24bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD24bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
</UL>
<P><STRONG><a name="[c1]"></a>touchgfx::LCD24bpp::DecompressorL8_L4::~DecompressorL8_L4()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp17DecompressorL8_L4E)
</UL>
<P><STRONG><a name="[433]"></a>touchgfx::LCD24bpp::DecompressorL8_L4::~DecompressorL8_L4__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev), UNUSED)

<P><STRONG><a name="[c2]"></a>touchgfx::LCD24bpp::DecompressorL8_RLE::~DecompressorL8_RLE()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp18DecompressorL8_RLEE)
</UL>
<P><STRONG><a name="[434]"></a>touchgfx::LCD24bpp::DecompressorL8_RLE::~DecompressorL8_RLE__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev), UNUSED)

<P><STRONG><a name="[c3]"></a>touchgfx::LCD24bpp::DecompressorL8_LZW9::~DecompressorL8_LZW9()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp19DecompressorL8_LZW9E)
</UL>
<P><STRONG><a name="[435]"></a>touchgfx::LCD24bpp::DecompressorL8_LZW9::~DecompressorL8_LZW9__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev), UNUSED)

<P><STRONG><a name="[34f]"></a>touchgfx::LCD24bpp::enableTextureMapperA4()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperA4() &rArr; touchgfx::LCD24bpp::enableTextureMapperA4_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[2d6]"></a>touchgfx::LCD24bpp::enableTextureMapperAll()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperAll() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[356]"></a>touchgfx::LCD24bpp::enableDecompressorL8_L4()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD24bpp::enableDecompressorL8_L4() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_All()
</UL>

<P><STRONG><a name="[2d7]"></a>touchgfx::LCD24bpp::enableDecompressorL8_All()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableDecompressorL8_All() &rArr; touchgfx::LCD24bpp::enableDecompressorL8_LZW9() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_LZW9()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_RLE()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_L4()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[357]"></a>touchgfx::LCD24bpp::enableDecompressorL8_RLE()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD24bpp::enableDecompressorL8_RLE() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_All()
</UL>

<P><STRONG><a name="[358]"></a>touchgfx::LCD24bpp::enableDecompressorL8_LZW9()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD24bpp::enableDecompressorL8_LZW9() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_All()
</UL>

<P><STRONG><a name="[355]"></a>touchgfx::LCD24bpp::enableTextureMapperRGB888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperRGB888() &rArr; touchgfx::LCD24bpp::enableTextureMapperRGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888_BilinearInterpolation()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[352]"></a>touchgfx::LCD24bpp::enableTextureMapperARGB8888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperARGB8888() &rArr; touchgfx::LCD24bpp::enableTextureMapperARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[354]"></a>touchgfx::LCD24bpp::enableTextureMapperL8_RGB888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperL8_RGB888() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[353]"></a>touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[c4]"></a>touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[436]"></a>touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[c5]"></a>touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[437]"></a>touchgfx::LCD24bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[351]"></a>touchgfx::LCD24bpp::enableTextureMapperA4_NearestNeighbor()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperA4_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[c8]"></a>touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[438]"></a>touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[35a]"></a>touchgfx::LCD24bpp::enableTextureMapperRGB888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperRGB888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888()
</UL>

<P><STRONG><a name="[c9]"></a>touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[439]"></a>touchgfx::LCD24bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[350]"></a>touchgfx::LCD24bpp::enableTextureMapperA4_BilinearInterpolation()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperA4_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[35c]"></a>touchgfx::LCD24bpp::enableTextureMapperARGB8888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperARGB8888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888()
</UL>

<P><STRONG><a name="[35e]"></a>touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_NearestNeighbor()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888()
</UL>

<P><STRONG><a name="[c6]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_RGB888_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[43a]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_RGB888_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[360]"></a>touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888()
</UL>

<P><STRONG><a name="[359]"></a>touchgfx::LCD24bpp::enableTextureMapperRGB888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperRGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888()
</UL>

<P><STRONG><a name="[c7]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[43b]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[cc]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[43c]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[35b]"></a>touchgfx::LCD24bpp::enableTextureMapperARGB8888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888()
</UL>

<P><STRONG><a name="[35d]"></a>touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888()
</UL>

<P><STRONG><a name="[ca]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[43d]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[cd]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[43e]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[43f]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[35f]"></a>touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888()
</UL>

<P><STRONG><a name="[cb]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[440]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[ce]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[441]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[d1]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[442]"></a>touchgfx::LCD24bpp::TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[443]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[cf]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[444]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[d2]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[445]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[d5]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[446]"></a>touchgfx::LCD24bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[447]"></a>touchgfx::LCD24bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[d6]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[448]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[d7]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd24bpp.o(i._ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[449]"></a>touchgfx::LCD24bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[182]"></a>touchgfx::LCD24bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD24bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
</UL>
<P><STRONG><a name="[373]"></a>touchgfx::LCD24bpp::LCD24bpp()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bppC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[44a]"></a>touchgfx::LCD24bpp::LCD24bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZN8touchgfx8LCD24bppC1Ev), UNUSED)

<P><STRONG><a name="[dd]"></a>touchgfx::LCD24bpp::~LCD24bpp()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx8LCD24bppD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
</UL>
<P><STRONG><a name="[44b]"></a>touchgfx::LCD24bpp::~LCD24bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx8LCD24bppD1Ev), UNUSED)

<P><STRONG><a name="[309]"></a>touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, constfont.o(i._ZN8touchgfx9ConstFontC2EPKNS_9GlyphNodeEttthhhhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>

<P><STRONG><a name="[188]"></a>touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[189]"></a>touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**) &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[18b]"></a>touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</STRONG> (Thumb, 392 bytes, Stack size 152 bytes, container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[18a]"></a>touchgfx::Container::add(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Container::add(touchgfx::Drawable&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[f3]"></a>TouchGFXHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv))
<BR><BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::getTFTFrameBuffer() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[126]"></a>HardwareMJPEGDecoder::getCurrentFrameNumber() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[361]"></a>TouchGFXGeneratedHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::getTFTFrameBuffer() const
</UL>

<P><STRONG><a name="[2f3]"></a>touchgfx::Rasterizer::calculateAlpha(int) const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canvas.o(i._ZNK8touchgfx10Rasterizer14calculateAlphaEi))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[143]"></a>touchgfx::CanvasWidget::invalidate() const</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::CanvasWidget::invalidate() const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[141]"></a>touchgfx::CanvasWidget::getSolidRect() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[154]"></a>touchgfx::CanvasWidget::getMinimalRect() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidget::getMinimalRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[140]"></a>touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[153]"></a>touchgfx::CanvasWidget::getAlpha() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv))
<BR>[Address Reference Count : 3]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[15f]"></a>touchgfx::PainterRGB888::getRenderingMethod() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, painterrgb888.o(i._ZNK8touchgfx13PainterRGB88818getRenderingMethodEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::PainterRGB888::getRenderingMethod() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
</UL>
<P><STRONG><a name="[162]"></a>touchgfx::PainterRGB888::paint(unsigned char*, short, short, short, short, unsigned char) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, painterrgb888.o(i._ZNK8touchgfx13PainterRGB8885paintEPhssssh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::PainterRGB888::paint(unsigned char*, short, short, short, short, unsigned char) const &rArr; touchgfx::paint::rgb888::lineFromColor(unsigned char*, unsigned, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::paint::rgb888::lineFromColor(unsigned char*, unsigned, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
</UL>
<P><STRONG><a name="[161]"></a>touchgfx::PainterRGB888::tearDown() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, painterrgb888.o(i._ZNK8touchgfx13PainterRGB8888tearDownEv))
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::paint::tearDown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
</UL>
<P><STRONG><a name="[163]"></a>touchgfx::AbstractPainter::getRenderingMethod() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter18getRenderingMethodEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
</UL>
<P><STRONG><a name="[160]"></a>touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
<LI> painterrgb888.o(.constdata__ZTVN8touchgfx13PainterRGB888E)
</UL>
<P><STRONG><a name="[164]"></a>touchgfx::AbstractPainter::tearDown() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx15AbstractPainter8tearDownEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
</UL>
<P><STRONG><a name="[171]"></a>touchgfx::Box::getSolidRect() const</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, box.o(i._ZNK8touchgfx3Box12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Box::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[173]"></a>touchgfx::Box::invalidateContent() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, box.o(i._ZNK8touchgfx3Box17invalidateContentEv))
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[170]"></a>touchgfx::Box::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Box::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[364]"></a>touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal.o(i._ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
</UL>

<P><STRONG><a name="[31e]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
</UL>

<P><STRONG><a name="[2fb]"></a>touchgfx::Rect::right() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZNK8touchgfx4Rect5rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[2fc]"></a>touchgfx::Rect::bottom() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZNK8touchgfx4Rect6bottomEv))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[2f7]"></a>touchgfx::Rect::isEmpty() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZNK8touchgfx4Rect7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[2f8]"></a>touchgfx::Rect::includes(const touchgfx::Rect&) const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect8includesERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::includes(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[2fa]"></a>touchgfx::Rect::intersect(const touchgfx::Rect&) const</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect9intersectERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[331]"></a>touchgfx::Rect::intersect(short, short) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, container.o(i._ZNK8touchgfx4Rect9intersectEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>

<P><STRONG><a name="[333]"></a>touchgfx::Rect::operator &(const touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, container.o(i._ZNK8touchgfx4RectanERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[329]"></a>touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, canvas.o(i._ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[32a]"></a>touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, canvas.o(i._ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[371]"></a>touchgfx::Circle::updateMinMaxX(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx6Circle13updateMinMaxXERKNS_7CWRUtil2Q5ERS2_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Circle::updateMinMaxX(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[372]"></a>touchgfx::Circle::updateMinMaxY(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx6Circle13updateMinMaxYERKNS_7CWRUtil2Q5ERS2_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Circle::updateMinMaxY(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[365]"></a>touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, circle.o(i._ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const &rArr; touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect() const
</UL>

<P><STRONG><a name="[157]"></a>touchgfx::Circle::getMinimalRect() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mainviewbase.o(i._ZNK8touchgfx6Circle14getMinimalRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = touchgfx::Circle::getMinimalRect() const &rArr; touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const &rArr; touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[158]"></a>touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const</STRONG> (Thumb, 1214 bytes, Stack size 256 bytes, circle.o(i._ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const &rArr; touchgfx::Canvas::render(unsigned char) &rArr; touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char) &rArr; touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(int) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[36d]"></a>touchgfx::Circle::lineToAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, circle.o(i._ZNK8touchgfx6Circle18lineToAngleRadius2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Circle::lineToAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[366]"></a>touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 496 bytes, Stack size 96 bytes, circle.o(i._ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxY(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxX(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
</UL>

<P><STRONG><a name="[36e]"></a>touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, circle.o(i._ZNK8touchgfx6Circle20lineToXYAngleRadius2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[36f]"></a>touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, circle.o(i._ZNK8touchgfx6Circle21updateMinMaxAngleLineERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxY(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxX(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[370]"></a>touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, circle.o(i._ZNK8touchgfx6Circle22updateMinMaxAngleSolidERKNS_7CWRUtil2Q5ERS2_S5_S5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxY(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxX(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[369]"></a>touchgfx::CWRUtil::Q5::operator /(int) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5dvEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator /(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[33f]"></a>touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5miERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[36a]"></a>touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[36c]"></a>touchgfx::CWRUtil::Q5::operator *(int) const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5mlEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[36b]"></a>touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5plERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleSolid(const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAngleLine(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAngleRadius2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[172]"></a>touchgfx::Drawable::invalidate() const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[146]"></a>touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[142]"></a>touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[330]"></a>touchgfx::Drawable::getAbsoluteRect() const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable15getAbsoluteRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[144]"></a>touchgfx::Drawable::invalidateContent() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK8touchgfx8Drawable17invalidateContentEv))
<BR>[Address Reference Count : 5]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[147]"></a>touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE))
<BR>[Address Reference Count : 6]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[184]"></a>touchgfx::LCD24bpp::framebufferFormat() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd24bpp.o(i._ZNK8touchgfx8LCD24bpp17framebufferFormatEv))
<BR>[Address Reference Count : 1]<UL><LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
</UL>
<P><STRONG><a name="[185]"></a>touchgfx::LCD24bpp::framebufferStride() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd24bpp.o(i._ZNK8touchgfx8LCD24bpp17framebufferStrideEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::LCD24bpp::framebufferStride() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd24bpp.o(.constdata__ZTVN8touchgfx8LCD24bppE)
</UL>
<P><STRONG><a name="[187]"></a>touchgfx::Container::getSolidRect() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, container.o(i._ZNK8touchgfx9Container12getSolidRectEv))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[186]"></a>touchgfx::Container::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Container::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[2e0]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>

<P><STRONG><a name="[2a7]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888_BilinearInterpolation()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperARGB8888_NearestNeighbor()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperRGB888_NearestNeighbor()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableTextureMapperA4_NearestNeighbor()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_LZW9()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_RLE()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::enableDecompressorL8_L4()
</UL>

<P><STRONG><a name="[155]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 8]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB888E)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
<LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1fd]"></a>ft5336_chip_id</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ft5336_reg.o(i.ft5336_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft5336_chip_id &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_ReadID
</UL>

<P><STRONG><a name="[1f7]"></a>ft5336_disatnce_left_right</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_disatnce_left_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_disatnce_left_right
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GestureConfig
</UL>

<P><STRONG><a name="[1f8]"></a>ft5336_distance_up_down</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_distance_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_distance_up_down
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GestureConfig
</UL>

<P><STRONG><a name="[1f9]"></a>ft5336_distance_zoom</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_distance_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_distance_zoom
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GestureConfig
</UL>

<P><STRONG><a name="[1f3]"></a>ft5336_g_mode</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_g_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_g_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_EnableIT
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_DisableIT
</UL>

<P><STRONG><a name="[1fa]"></a>ft5336_gest_id</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft5336_reg.o(i.ft5336_gest_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft5336_gest_id
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GetGesture
</UL>

<P><STRONG><a name="[1f5]"></a>ft5336_offset_left_right</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_offset_left_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_offset_left_right
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GestureConfig
</UL>

<P><STRONG><a name="[1f6]"></a>ft5336_offset_up_down</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_offset_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_offset_up_down
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GestureConfig
</UL>

<P><STRONG><a name="[1f4]"></a>ft5336_radian_value</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft5336_reg.o(i.ft5336_radian_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft5336_radian_value
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GestureConfig
</UL>

<P><STRONG><a name="[1fb]"></a>ft5336_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ft5336_reg.o(i.ft5336_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft5336_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_td_status
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_chip_id
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GetState
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GetMultiTouchState
</UL>

<P><STRONG><a name="[1f2]"></a>ft5336_td_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ft5336_reg.o(i.ft5336_td_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft5336_td_status &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_DetectTouch
</UL>

<P><STRONG><a name="[1aa]"></a>main</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2188 + Unknown Stack Size
<LI>Call Chain = main &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_PreOSInit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LIBJPEG_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2a1]"></a>osDelay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[378]"></a>osKernelInitialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37a]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e7]"></a>osMessageQueueGet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>

<P><STRONG><a name="[2e5]"></a>osMessageQueueNew</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>

<P><STRONG><a name="[2e6]"></a>osMessageQueuePut</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
</UL>

<P><STRONG><a name="[2dc]"></a>osMutexAcquire</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::start()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[2e1]"></a>osMutexNew</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
</UL>

<P><STRONG><a name="[2dd]"></a>osMutexRelease</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::start()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::endFrame()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[2ca]"></a>osSemaphoreAcquire</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[2cc]"></a>osSemaphoreNew</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
</UL>

<P><STRONG><a name="[1ee]"></a>osSemaphoreRelease</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_ExternalJobCompleted
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::endFrame()
</UL>

<P><STRONG><a name="[379]"></a>osThreadNew</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b3]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[3cc]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3a4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[29e]"></a>touchgfx_components_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i.touchgfx_components_init))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
</UL>

<P><STRONG><a name="[29f]"></a>touchgfx_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i.touchgfx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstanceSize()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstance()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
</UL>

<P><STRONG><a name="[2a5]"></a>touchgfx_taskEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i.touchgfx_taskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx_taskEntry &rArr; TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFX_Task
</UL>

<P><STRONG><a name="[390]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3c0]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3cf]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[39e]"></a>vApplicationIdleHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationIdleHook &rArr; vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[395]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3a3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[392]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[391]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[394]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[396]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[39d]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3c5]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3ba]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[381]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[38a]"></a>vQueueDelete</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[3bc]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[3ad]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[37b]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[3c9]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3b2]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3be]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3bd]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3bf]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3b9]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskSetApplicationTaskTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[37c]"></a>vTaskStartScheduler</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[3ab]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1b0]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[e3]"></a>videoTaskFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i.videoTaskFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = videoTaskFunc &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry() &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c3]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2a3]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[38b]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[389]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[387]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[386]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[380]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[37f]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3a1]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[383]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[382]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[38c]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[388]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[37e]"></a>xQueueReceive</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[37d]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[385]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[384]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[3c2]"></a>xTaskCallApplicationTaskHook</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.xTaskCallApplicationTaskHook))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3ca]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[38e]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[38d]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3cb]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[2a2]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[3ae]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[3c8]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[39b]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[3cd]"></a>xTaskPriorityInherit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3b1]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3ac]"></a>xTaskResumeAll</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3c1]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3a9]"></a>xTimerGenericCommand</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3c4]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::decoderTaskEntry() &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoTaskFunc
</UL>

<P><STRONG><a name="[d9]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::Stream::Stream()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
</UL>
<P><STRONG><a name="[44c]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::Stream::Stream__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev), UNUSED)

<P><STRONG><a name="[2d2]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::endFrame()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj272ELj1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)272, (unsigned)1440, (touchgfx::Bitmap::BitmapFormat)1&rang;::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>

<P><STRONG><a name="[156]"></a>touchgfx::MoveAnimator&lang;touchgfx::Circle&rang;::handleTickEvent()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainviewbase.o(t._ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> mainviewbase.o(.constdata__ZTVN8touchgfx12MoveAnimatorINS_6CircleEEE)
</UL>
<P><STRONG><a name="[3d0]"></a>touchgfx::MoveAnimator&lang;touchgfx::Circle&rang;::nextMoveAnimationStep()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, mainviewbase.o(t._ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveTo(short, short)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::TimerWidgets::remove(const touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[2d3]"></a>T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = T2* touchgfx::makeTransition&lang;mainView, mainPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; mainView::mainView() &rArr; mainViewBase::mainViewBase() &rArr; touchgfx::AbstractPainterRGB888::AbstractPainterRGB888__sub_object() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainView::mainView()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainPresenter::mainPresenter(mainView&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::bindTransition(touchgfx::Transition&)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::TimerWidgets::clear()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotomainScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[368]"></a>T1 touchgfx::abs&lang;int&rang;(T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, circle.o(t._ZN8touchgfx3absIiEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[34c]"></a>T1 touchgfx::abs&lang;short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gestures.o(t._ZN8touchgfx3absIsEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[2f9]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[2fd]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE3addES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[2ff]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[44d]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev), UNUSED)

<P><STRONG><a name="[2c1]"></a>touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainviewbase.o(t._ZN8touchgfx7CWRUtil4toQ5IiEENS0_2Q5ET_))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainViewBase::mainViewBase()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::Circle()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::AbstractPainter*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[180]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[18c]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[18d]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[18e]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[18f]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;mainView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[190]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[191]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[33c]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, circle.o(t._ZNK8touchgfx7CWRUtil2Q52toIiEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[367]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, circle.o(t._ZNK8touchgfx7CWRUtil2Q52toIsEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[181]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[19d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[44e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[44f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[28a]"></a>MPU_Config</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[293]"></a>MX_DMA2D_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[295]"></a>MX_FMC_Init</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, main.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[296]"></a>MX_GPIO_Init</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[298]"></a>MX_I2C4_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.MX_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29b]"></a>MX_LTDC_Init</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, main.o(i.MX_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29c]"></a>MX_OCTOSPI1_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.MX_OCTOSPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MX_OCTOSPI1_Init &rArr; BSP_OSPI_NOR_Init &rArr; BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_ExitOPIMode &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_EnableMemoryMappedMode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a0]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(i.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 194 bytes, Stack size 240 bytes, stm32h7xx_hal_msp.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[192]"></a>__sti___25_TouchGFXConfiguration_cpp_f5abfd34</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __sti___25_TouchGFXConfiguration_cpp_f5abfd34 &rArr; STM32DMA::STM32DMA() &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD24bpp::LCD24bpp()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::VectorFontRendererImpl::VectorFontRendererImpl()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.init_array)
</UL>
<P><STRONG><a name="[2cf]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableInterrupts()
</UL>

<P><STRONG><a name="[2d0]"></a>__NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._Z17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::disableInterrupts()
</UL>

<P><STRONG><a name="[2d1]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::configureInterrupts()
</UL>

<P><STRONG><a name="[193]"></a>__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sti___24_TouchGFXGeneratedHAL_cpp_db822bdb &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.init_array)
</UL>
<P><STRONG><a name="[bf]"></a>DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN8STM32DMA10initializeEv)
</UL>
<P><STRONG><a name="[1db]"></a>OSPI_NOR_EnterDOPIMode</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32h7b3i_discovery_ospi.o(i.OSPI_NOR_EnterDOPIMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = OSPI_NOR_EnterDOPIMode &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
</UL>

<P><STRONG><a name="[1dc]"></a>OSPI_NOR_EnterSOPIMode</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32h7b3i_discovery_ospi.o(i.OSPI_NOR_EnterSOPIMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OSPI_NOR_EnterSOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
</UL>

<P><STRONG><a name="[1da]"></a>OSPI_NOR_ExitOPIMode</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32h7b3i_discovery_ospi.o(i.OSPI_NOR_ExitOPIMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = OSPI_NOR_ExitOPIMode &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
</UL>

<P><STRONG><a name="[1df]"></a>OSPI_NOR_MspDeInit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32h7b3i_discovery_ospi.o(i.OSPI_NOR_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OSPI_NOR_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>

<P><STRONG><a name="[1e6]"></a>OSPI_NOR_MspInit</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, stm32h7b3i_discovery_ospi.o(i.OSPI_NOR_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OSPI_NOR_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[1e9]"></a>OSPI_NOR_ResetMemory</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32h7b3i_discovery_ospi.o(i.OSPI_NOR_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OSPI_NOR_ResetMemory &rArr; MX25LM51245G_ResetMemory &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetMemory
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[1ec]"></a>FT5336_Probe</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, stm32h7b3i_discovery_ts.o(i.FT5336_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FT5336_Probe &rArr; FT5336_ReadID &rArr; ft5336_chip_id &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_RegisterBusIO
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>

<P><STRONG><a name="[1d2]"></a>I2C4_MspInit</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, stm32h7b3i_discovery_bus.o(i.I2C4_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[1d6]"></a>I2C4_ReadReg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32h7b3i_discovery_bus.o(i.I2C4_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C4_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_ReadReg
</UL>

<P><STRONG><a name="[1d8]"></a>I2C4_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32h7b3i_discovery_bus.o(i.I2C4_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C4_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_WriteReg
</UL>

<P><STRONG><a name="[275]"></a>I2C_Compute_PRESC_SCLDEL_SDADEL</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, stm32h7b3i_discovery_bus.o(i.I2C_Compute_PRESC_SCLDEL_SDADEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Compute_PRESC_SCLDEL_SDADEL
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
</UL>

<P><STRONG><a name="[276]"></a>I2C_Compute_SCLL_SCLH</STRONG> (Thumb, 260 bytes, Stack size 68 bytes, stm32h7b3i_discovery_bus.o(i.I2C_Compute_SCLL_SCLH))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Compute_SCLL_SCLH
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
</UL>

<P><STRONG><a name="[1d4]"></a>I2C_GetTiming</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32h7b3i_discovery_bus.o(i.I2C_GetTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_GetTiming &rArr; I2C_Compute_SCLL_SCLH
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Compute_SCLL_SCLH
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Compute_PRESC_SCLDEL_SDADEL
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[1f1]"></a>FT5336_DetectTouch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ft5336.o(i.FT5336_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT5336_DetectTouch &rArr; ft5336_td_status &rArr; ft5336_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_td_status
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GetState
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5336_GetMultiTouchState
</UL>

<P><STRONG><a name="[b7]"></a>ReadRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ft5336.o(i.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(i.FT5336_RegisterBusIO)
</UL>
<P><STRONG><a name="[b8]"></a>WriteRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ft5336.o(i.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(i.FT5336_RegisterBusIO)
</UL>
<P><STRONG><a name="[245]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[25c]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[25d]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[243]"></a>MDMA_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(i.MDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
</UL>

<P><STRONG><a name="[244]"></a>MDMA_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32h7xx_hal_mdma.o(i.MDMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MDMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>

<P><STRONG><a name="[278]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[277]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[213]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[217]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[214]"></a>I2C_TransferConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[212]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[215]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[218]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[27a]"></a>JPEG_ACHuff_BitsVals_To_SizeCodes</STRONG> (Thumb, 112 bytes, Stack size 1304 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_ACHuff_BitsVals_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>

<P><STRONG><a name="[27b]"></a>JPEG_Bits_To_SizeCodes</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Bits_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ACHuff_BitsVals_To_SizeCodes
</UL>

<P><STRONG><a name="[22b]"></a>JPEG_DMA_ContinueProcess</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_DMA_ContinueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = JPEG_DMA_ContinueProcess &rArr; JPEG_DMA_EndProcess &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[27e]"></a>JPEG_DMA_EndProcess</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_DMA_EndProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = JPEG_DMA_EndProcess &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutAbortCallback
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[234]"></a>JPEG_DMA_PollResidualData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_DMA_PollResidualData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
</UL>

<P><STRONG><a name="[227]"></a>JPEG_DMA_StartProcess</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JPEG_DMA_StartProcess &rArr; HAL_MDMA_Start_IT &rArr; MDMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[226]"></a>JPEG_Init_Process</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Init_Process))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[bb]"></a>JPEG_MDMAErrorCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_MDMAErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JPEG_MDMAErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[ba]"></a>JPEG_MDMAInCpltCallback</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_MDMAInCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JPEG_MDMAInCpltCallback &rArr; HAL_MDMA_Start_IT &rArr; MDMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[bd]"></a>JPEG_MDMAOutAbortCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_MDMAOutAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = JPEG_MDMAOutAbortCallback &rArr; JPEG_DMA_EndProcess &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[bc]"></a>JPEG_MDMAOutCpltCallback</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_MDMAOutCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = JPEG_MDMAOutCpltCallback &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[22c]"></a>JPEG_Process</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[284]"></a>JPEG_ReadInputData</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_ReadInputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Pause
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[286]"></a>JPEG_Set_HuffAC_Mem</STRONG> (Thumb, 148 bytes, Stack size 832 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Set_HuffAC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2156<LI>Call Chain = JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ACHuff_BitsVals_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[287]"></a>JPEG_Set_HuffDC_Mem</STRONG> (Thumb, 184 bytes, Stack size 1376 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Set_HuffDC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396<LI>Call Chain = JPEG_Set_HuffDC_Mem &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[22f]"></a>JPEG_Set_HuffEnc_Mem</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Set_HuffEnc_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2164<LI>Call Chain = JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_Huff_DHTMem
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[288]"></a>JPEG_Set_Huff_DHTMem</STRONG> (Thumb, 582 bytes, Stack size 28 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_Set_Huff_DHTMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JPEG_Set_Huff_DHTMem
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[285]"></a>JPEG_StoreOutputData</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(i.JPEG_StoreOutputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[236]"></a>LTDC_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, stm32h7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[249]"></a>OSPI_ConfigCmd</STRONG> (Thumb, 458 bytes, Stack size 36 bytes, stm32h7xx_hal_ospi.o(i.OSPI_ConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[b9]"></a>OSPI_DMAAbortCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32h7xx_hal_ospi.o(i.OSPI_DMAAbortCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSPI_DMAAbortCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_ErrorCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_ospi.o(i.HAL_OSPI_IRQHandler)
</UL>
<P><STRONG><a name="[246]"></a>OSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(i.OSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
</UL>

<P><STRONG><a name="[398]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[39a]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[39f]"></a>prvInitialiseMutex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[3a0]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[3a6]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3b0]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[38f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[393]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[39c]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[e7]"></a>prvIdleTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[3a2]"></a>prvInitialiseNewTask</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3ce]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[397]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3a5]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3a7]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3aa]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3a8]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3af]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[e8]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[3b4]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3b5]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[e4]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[194]"></a>__sti___21_typedtextdatabase_cpp_05ec7672</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __sti___21_typedtextdatabase_cpp_05ec7672 &rArr; getFont_verdana_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typedtextdatabase.o(.init_array)
</UL>
<P><STRONG><a name="[195]"></a>__sti___15_Application_cpp_63cd8d44</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i.__sti___15_Application_cpp_63cd8d44))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.init_array)
</UL>
<P><STRONG><a name="[196]"></a>__sti___7_LCD_cpp_86507772</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.__sti___7_LCD_cpp_86507772))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
